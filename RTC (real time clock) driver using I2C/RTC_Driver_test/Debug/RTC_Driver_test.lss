
RTC_Driver_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002862  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00002862  000028d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021d8  00000000  00000000  00002904  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001053  00000000  00000000  00004adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a32a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000abb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 47 06 	call	0xc8e	; 0xc8e <main>
      7a:	0c 94 2f 14 	jmp	0x285e	; 0x285e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <main>:



void APP_RTC_Display_Time_and_Date(Date_And_Time * ptr);
int main(void)
{	Date_And_Time Current_Date_And_Time={35,21,2,5,28,3,24};
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	63 97       	sbiw	r28, 0x13	; 19
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	98 8b       	std	Y+16, r25	; 0x10
     ca8:	8f 87       	std	Y+15, r24	; 0x0f
     caa:	e4 e8       	ldi	r30, 0x84	; 132
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	fa 8b       	std	Y+18, r31	; 0x12
     cb0:	e9 8b       	std	Y+17, r30	; 0x11
     cb2:	f7 e0       	ldi	r31, 0x07	; 7
     cb4:	fb 8b       	std	Y+19, r31	; 0x13
     cb6:	e9 89       	ldd	r30, Y+17	; 0x11
     cb8:	fa 89       	ldd	r31, Y+18	; 0x12
     cba:	00 80       	ld	r0, Z
     cbc:	89 89       	ldd	r24, Y+17	; 0x11
     cbe:	9a 89       	ldd	r25, Y+18	; 0x12
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	9a 8b       	std	Y+18, r25	; 0x12
     cc4:	89 8b       	std	Y+17, r24	; 0x11
     cc6:	ef 85       	ldd	r30, Y+15	; 0x0f
     cc8:	f8 89       	ldd	r31, Y+16	; 0x10
     cca:	00 82       	st	Z, r0
     ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
     cce:	98 89       	ldd	r25, Y+16	; 0x10
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	98 8b       	std	Y+16, r25	; 0x10
     cd4:	8f 87       	std	Y+15, r24	; 0x0f
     cd6:	9b 89       	ldd	r25, Y+19	; 0x13
     cd8:	91 50       	subi	r25, 0x01	; 1
     cda:	9b 8b       	std	Y+19, r25	; 0x13
     cdc:	eb 89       	ldd	r30, Y+19	; 0x13
     cde:	ee 23       	and	r30, r30
     ce0:	51 f7       	brne	.-44     	; 0xcb6 <main+0x28>
	Date_And_Time Get_Date_Time;
	RTC_Init();
     ce2:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <RTC_Init>
	H_Lcd_Void_LCDInit();
     ce6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <H_Lcd_Void_LCDInit>
	H_Lcd_Void_LCDClear();
     cea:	0e 94 f6 12 	call	0x25ec	; 0x25ec <H_Lcd_Void_LCDClear>

	RTC_Set_Time(&Current_Date_And_Time);
     cee:	ce 01       	movw	r24, r28
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <RTC_Set_Time>
	RTC_Set_Date(&Current_Date_And_Time);
     cf6:	ce 01       	movw	r24, r28
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <RTC_Set_Date>

	RTC_Get_Time(&Get_Date_Time);
     cfe:	ce 01       	movw	r24, r28
     d00:	08 96       	adiw	r24, 0x08	; 8
     d02:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <RTC_Get_Time>
	RTC_Get_Date(&Get_Date_Time);
     d06:	ce 01       	movw	r24, r28
     d08:	08 96       	adiw	r24, 0x08	; 8
     d0a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <RTC_Get_Date>

	APP_RTC_Display_Time_and_Date(&Get_Date_Time);
     d0e:	ce 01       	movw	r24, r28
     d10:	08 96       	adiw	r24, 0x08	; 8
     d12:	0e 94 8c 06 	call	0xd18	; 0xd18 <APP_RTC_Display_Time_and_Date>
     d16:	ff cf       	rjmp	.-2      	; 0xd16 <main+0x88>

00000d18 <APP_RTC_Display_Time_and_Date>:

 }
 return 0;
}
void  APP_RTC_Display_Time_and_Date(Date_And_Time * ptr)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <APP_RTC_Display_Time_and_Date+0x6>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	9a 83       	std	Y+2, r25	; 0x02
     d24:	89 83       	std	Y+1, r24	; 0x01

	H_Lcd_Void_LCDWriteNumber(ptr->hours);
     d26:	e9 81       	ldd	r30, Y+1	; 0x01
     d28:	fa 81       	ldd	r31, Y+2	; 0x02
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	a0 e0       	ldi	r26, 0x00	; 0
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	bc 01       	movw	r22, r24
     d36:	cd 01       	movw	r24, r26
     d38:	0e 94 00 13 	call	0x2600	; 0x2600 <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteCharacter(':');
     d3c:	8a e3       	ldi	r24, 0x3A	; 58
     d3e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteNumber(ptr->min);
     d42:	e9 81       	ldd	r30, Y+1	; 0x01
     d44:	fa 81       	ldd	r31, Y+2	; 0x02
     d46:	81 81       	ldd	r24, Z+1	; 0x01
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	0e 94 00 13 	call	0x2600	; 0x2600 <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteCharacter(':');
     d58:	8a e3       	ldi	r24, 0x3A	; 58
     d5a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteNumber(ptr->sec);
     d5e:	e9 81       	ldd	r30, Y+1	; 0x01
     d60:	fa 81       	ldd	r31, Y+2	; 0x02
     d62:	80 81       	ld	r24, Z
     d64:	88 2f       	mov	r24, r24
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a0 e0       	ldi	r26, 0x00	; 0
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	bc 01       	movw	r22, r24
     d6e:	cd 01       	movw	r24, r26
     d70:	0e 94 00 13 	call	0x2600	; 0x2600 <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDGoTo(1,0);
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	0e 94 88 13 	call	0x2710	; 0x2710 <H_Lcd_Void_LCDGoTo>
	//H_Lcd_Void_LCDWriteNumber(Get_Date_Time.date);
	H_Lcd_Void_LCDWriteString(RTC_Day_str_display[ptr->day]);
     d7c:	28 e6       	ldi	r18, 0x68	; 104
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	e9 81       	ldd	r30, Y+1	; 0x01
     d82:	fa 81       	ldd	r31, Y+2	; 0x02
     d84:	83 81       	ldd	r24, Z+3	; 0x03
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	82 0f       	add	r24, r18
     d94:	93 1f       	adc	r25, r19
     d96:	0e 94 cd 12 	call	0x259a	; 0x259a <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDWriteCharacter(' ');
     d9a:	80 e2       	ldi	r24, 0x20	; 32
     d9c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteNumber(ptr->date);
     da0:	e9 81       	ldd	r30, Y+1	; 0x01
     da2:	fa 81       	ldd	r31, Y+2	; 0x02
     da4:	84 81       	ldd	r24, Z+4	; 0x04
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a0 e0       	ldi	r26, 0x00	; 0
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	bc 01       	movw	r22, r24
     db0:	cd 01       	movw	r24, r26
     db2:	0e 94 00 13 	call	0x2600	; 0x2600 <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteCharacter('/');
     db6:	8f e2       	ldi	r24, 0x2F	; 47
     db8:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteNumber(ptr->month);
     dbc:	e9 81       	ldd	r30, Y+1	; 0x01
     dbe:	fa 81       	ldd	r31, Y+2	; 0x02
     dc0:	85 81       	ldd	r24, Z+5	; 0x05
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	a0 e0       	ldi	r26, 0x00	; 0
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 00 13 	call	0x2600	; 0x2600 <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteCharacter('/');
     dd2:	8f e2       	ldi	r24, 0x2F	; 47
     dd4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteNumber(20);
     dd8:	64 e1       	ldi	r22, 0x14	; 20
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 00 13 	call	0x2600	; 0x2600 <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteNumber(ptr->year);
     de4:	e9 81       	ldd	r30, Y+1	; 0x01
     de6:	fa 81       	ldd	r31, Y+2	; 0x02
     de8:	86 81       	ldd	r24, Z+6	; 0x06
     dea:	88 2f       	mov	r24, r24
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	a0 e0       	ldi	r26, 0x00	; 0
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	bc 01       	movw	r22, r24
     df4:	cd 01       	movw	r24, r26
     df6:	0e 94 00 13 	call	0x2600	; 0x2600 <H_Lcd_Void_LCDWriteNumber>
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <M_Void_I2C_Init>:

#define F_CPU 16000000UL
#define SCL_CLK 100000		/*100khz for the RTC*/
#define BITRATE(TWSR_REG)	((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR_REG&((1<<TWPS0)|(1<<TWPS1)))))
/*************************		INITIATE I2C	******************/
void M_Void_I2C_Init (){
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
	TWBR_REG = BITRATE(TWSR_REG=0x00);
     e10:	00 e2       	ldi	r16, 0x20	; 32
     e12:	10 e0       	ldi	r17, 0x00	; 0
     e14:	e1 e2       	ldi	r30, 0x21	; 33
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	10 82       	st	Z, r1
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e4       	ldi	r21, 0x40	; 64
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	80 e1       	ldi	r24, 0x10	; 16
     e28:	93 e4       	ldi	r25, 0x43	; 67
     e2a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	bc 01       	movw	r22, r24
     e34:	cd 01       	movw	r24, r26
     e36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	f8 01       	movw	r30, r16
     e40:	80 83       	st	Z, r24
}
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	08 95       	ret

00000e4c <M_U8_I2C_Start>:
/*************************		SEND START		*******************/
u8 M_U8_I2C_Start(){
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	0f 92       	push	r0
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
	u8 transmit_status;
	TWCR_REG =(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /*Enable TWI, generate START*/
     e56:	e6 e5       	ldi	r30, 0x56	; 86
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	84 ea       	ldi	r24, 0xA4	; 164
     e5c:	80 83       	st	Z, r24
	while(!(TWCR_REG & (1<<TWINT)));	/* Wait until TWI finish its current job*/
     e5e:	e6 e5       	ldi	r30, 0x56	; 86
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	88 23       	and	r24, r24
     e66:	dc f7       	brge	.-10     	; 0xe5e <M_U8_I2C_Start+0x12>
	transmit_status = (TWSR_REG & 0xF8);		/* Read TWI status register */
     e68:	e1 e2       	ldi	r30, 0x21	; 33
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 7f       	andi	r24, 0xF8	; 248
     e70:	89 83       	std	Y+1, r24	; 0x01
	if(transmit_status != TWI_START)		/* Check weather START transmitted or not? */
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	88 30       	cpi	r24, 0x08	; 8
     e76:	09 f0       	breq	.+2      	; 0xe7a <M_U8_I2C_Start+0x2e>
	transmit_status = START_FAILED;			/* Return 0 to indicate start condition fail*/
     e78:	19 82       	std	Y+1, r1	; 0x01
	return transmit_status;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <M_U8_I2C_SendSlaveAddressWithWrite>:
/*After Start we will send slave address with write*/
u8 M_U8_I2C_SendSlaveAddressWithWrite (u8 write_address){
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <M_U8_I2C_SendSlaveAddressWithWrite+0x6>
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	8a 83       	std	Y+2, r24	; 0x02
	u8 transmit_status;
	/*SEND ADDRESS BYTE*/
	TWDR_REG = write_address;		    /* Write SLA+W in TWI data register */
     e90:	e3 e2       	ldi	r30, 0x23	; 35
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	80 83       	st	Z, r24
	TWCR_REG = (1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
     e98:	e6 e5       	ldi	r30, 0x56	; 86
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	84 e8       	ldi	r24, 0x84	; 132
     e9e:	80 83       	st	Z, r24
	while(!(TWCR_REG&(1<<TWINT)));		/* Wait until TWI finish its current job */
     ea0:	e6 e5       	ldi	r30, 0x56	; 86
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	88 23       	and	r24, r24
     ea8:	dc f7       	brge	.-10     	; 0xea0 <M_U8_I2C_SendSlaveAddressWithWrite+0x1c>

	/*CHECK TRANSMIT WITH ACK*/
	transmit_status= (TWSR_REG & 0xF8);		/* Read TWI status register */
     eaa:	e1 e2       	ldi	r30, 0x21	; 33
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 7f       	andi	r24, 0xF8	; 248
     eb2:	89 83       	std	Y+1, r24	; 0x01
	if(transmit_status == TWI_MT_SLA_W_ACK)	/* Check for SLA+W transmitted & ack received */
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	88 31       	cpi	r24, 0x18	; 24
     eb8:	19 f4       	brne	.+6      	; 0xec0 <M_U8_I2C_SendSlaveAddressWithWrite+0x3c>
	transmit_status = TWI_MT_SLA_W_ACK;		/* ACK RECIEVED */
     eba:	88 e1       	ldi	r24, 0x18	; 24
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <M_U8_I2C_SendSlaveAddressWithWrite+0x46>

	/*TRANSMIT WITH NO ACK*/
	else if(transmit_status == TWI_MT_SLA_NACK)		/* Check for SLA+W transmitted*/
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	80 32       	cpi	r24, 0x20	; 32
     ec4:	11 f4       	brne	.+4      	; 0xeca <M_U8_I2C_SendSlaveAddressWithWrite+0x46>
	transmit_status = TWI_MT_SLA_NACK;				/* Nack received */
     ec6:	80 e2       	ldi	r24, 0x20	; 32
     ec8:	89 83       	std	Y+1, r24	; 0x01

	return transmit_status;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <M_U8_I2C_Repeated_Start>:
/**************************		REPEAT START FUNCTION		****************/
u8 M_U8_I2C_Repeated_Start(){
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	u8 transmit_status;
	TWCR_REG = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate start */
     ee0:	e6 e5       	ldi	r30, 0x56	; 86
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	84 ea       	ldi	r24, 0xA4	; 164
     ee6:	80 83       	st	Z, r24
	while(!(TWCR_REG & (1<<TWINT)));			/* Wait until TWI finish its current job */
     ee8:	e6 e5       	ldi	r30, 0x56	; 86
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	dc f7       	brge	.-10     	; 0xee8 <M_U8_I2C_Repeated_Start+0x12>
	transmit_status = TWSR_REG & 0xF8;					/* Read TWI status register */
     ef2:	e1 e2       	ldi	r30, 0x21	; 33
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 7f       	andi	r24, 0xF8	; 248
     efa:	89 83       	std	Y+1, r24	; 0x01
	if(transmit_status!= TWI_REP_START)					/* Check for repeated start transmitted */
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	80 31       	cpi	r24, 0x10	; 16
     f00:	09 f0       	breq	.+2      	; 0xf04 <M_U8_I2C_Repeated_Start+0x2e>
	transmit_status = REP_START_FAILED;					/* repeated start condition fail */
     f02:	19 82       	std	Y+1, r1	; 0x01

	return transmit_status;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
}
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <M_U8_I2C_SendSlaveAddressWithRead>:
/**************************		SEND SLAVE ADDRESS WITH WRITE	**************/
u8 M_U8_I2C_SendSlaveAddressWithRead(u8 read_address){
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <M_U8_I2C_SendSlaveAddressWithRead+0x6>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	8a 83       	std	Y+2, r24	; 0x02
	u8 transmit_status;
	TWDR_REG = read_address;					/* Write SLA+R in TWI data register */
     f1a:	e3 e2       	ldi	r30, 0x23	; 35
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	80 83       	st	Z, r24
	TWCR_REG = (1<<TWEN)|(1<<TWINT);			/* Enable TWI and clear interrupt flag */
     f22:	e6 e5       	ldi	r30, 0x56	; 86
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	84 e8       	ldi	r24, 0x84	; 132
     f28:	80 83       	st	Z, r24
	while(!(TWCR_REG&(1<<TWINT)));				/* Wait until TWI finish its current job */
     f2a:	e6 e5       	ldi	r30, 0x56	; 86
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	88 23       	and	r24, r24
     f32:	dc f7       	brge	.-10     	; 0xf2a <M_U8_I2C_SendSlaveAddressWithRead+0x1c>
	transmit_status = TWSR_REG & 0xF8;					/* Read TWI status register */
     f34:	e1 e2       	ldi	r30, 0x21	; 33
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	88 7f       	andi	r24, 0xF8	; 248
     f3c:	89 83       	std	Y+1, r24	; 0x01

	if(transmit_status == TWI_MT_SLA_R_ACK)				/* Check for SLA+R transmitted*/
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	80 34       	cpi	r24, 0x40	; 64
     f42:	19 f4       	brne	.+6      	; 0xf4a <M_U8_I2C_SendSlaveAddressWithRead+0x3c>
	transmit_status = TWI_MT_SLA_R_ACK;					/* Ack received */
     f44:	80 e4       	ldi	r24, 0x40	; 64
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <M_U8_I2C_SendSlaveAddressWithRead+0x46>
	else if(transmit_status == TWI_MR_SLA_R_NACK)				/* Check for SLA+R transmitted*/
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	88 34       	cpi	r24, 0x48	; 72
     f4e:	11 f4       	brne	.+4      	; 0xf54 <M_U8_I2C_SendSlaveAddressWithRead+0x46>
	transmit_status = TWI_MR_SLA_R_NACK;					/* Nack received */
     f50:	88 e4       	ldi	r24, 0x48	; 72
     f52:	89 83       	std	Y+1, r24	; 0x01

	return transmit_status;
     f54:	89 81       	ldd	r24, Y+1	; 0x01
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <M_U8_I2C_Write>:
/**************************		WRITE DATA	FUNCTION	***********************/
u8 M_U8_I2C_Write(u8 data){
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <M_U8_I2C_Write+0x6>
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	8a 83       	std	Y+2, r24	; 0x02
	u8 transmit_status;
	TWDR_REG = data;				/* Copy data in TWI data register */
     f6c:	e3 e2       	ldi	r30, 0x23	; 35
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	80 83       	st	Z, r24
	TWCR_REG = (1<<TWEN)|(1<<TWINT);/* Enable TWI and clear interrupt flag */
     f74:	e6 e5       	ldi	r30, 0x56	; 86
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	84 e8       	ldi	r24, 0x84	; 132
     f7a:	80 83       	st	Z, r24
	while(!(TWCR_REG&(1<<TWINT)));	/* Wait until TWI finish its current job */
     f7c:	e6 e5       	ldi	r30, 0x56	; 86
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	88 23       	and	r24, r24
     f84:	dc f7       	brge	.-10     	; 0xf7c <M_U8_I2C_Write+0x1c>
	transmit_status = TWSR_REG & 0xF8;		/* Read TWI status register */
     f86:	e1 e2       	ldi	r30, 0x21	; 33
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	88 7f       	andi	r24, 0xF8	; 248
     f8e:	89 83       	std	Y+1, r24	; 0x01
	if(transmit_status==TWI_MT_DATA_ACK)		/* Check for data transmitted*/
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	88 32       	cpi	r24, 0x28	; 40
     f94:	19 f4       	brne	.+6      	; 0xf9c <M_U8_I2C_Write+0x3c>
	transmit_status = TWI_MT_DATA_ACK;			/* Ack received */
     f96:	88 e2       	ldi	r24, 0x28	; 40
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	05 c0       	rjmp	.+10     	; 0xfa6 <M_U8_I2C_Write+0x46>
	else if(transmit_status==TWI_MT_DATA_NACK)	/* Check for data transmitted*/
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	80 33       	cpi	r24, 0x30	; 48
     fa0:	11 f4       	brne	.+4      	; 0xfa6 <M_U8_I2C_Write+0x46>
	transmit_status = TWI_MT_DATA_NACK;		/* Nack received */
     fa2:	80 e3       	ldi	r24, 0x30	; 48
     fa4:	89 83       	std	Y+1, r24	; 0x01

	return transmit_status;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <M_U8_I2C_ReadWithAck>:
u8 M_U8_I2C_ReadWithAck(){
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);	/* Enable TWI, generation of Ack */
     fba:	e6 e5       	ldi	r30, 0x56	; 86
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	84 ec       	ldi	r24, 0xC4	; 196
     fc0:	80 83       	st	Z, r24
    while(!(TWCR_REG&(1<<TWINT)));				/* Wait until TWI finish its current job */
     fc2:	e6 e5       	ldi	r30, 0x56	; 86
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	88 23       	and	r24, r24
     fca:	dc f7       	brge	.-10     	; 0xfc2 <M_U8_I2C_ReadWithAck+0x10>
    return TWDR_REG;							/* Return received data */
     fcc:	e3 e2       	ldi	r30, 0x23	; 35
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <M_U8_I2C_ReadWithNack>:
u8 M_U8_I2C_ReadWithNack(){
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG =(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
     fe0:	e6 e5       	ldi	r30, 0x56	; 86
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	84 e8       	ldi	r24, 0x84	; 132
     fe6:	80 83       	st	Z, r24
    while(!(TWCR_REG&(1<<TWINT)));			/* Wait until TWI finish its current job */
     fe8:	e6 e5       	ldi	r30, 0x56	; 86
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	88 23       	and	r24, r24
     ff0:	dc f7       	brge	.-10     	; 0xfe8 <M_U8_I2C_ReadWithNack+0x10>
    return TWDR_REG;					/* Return received data */
     ff2:	e3 e2       	ldi	r30, 0x23	; 35
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
}
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <M_Void_I2C_STOP>:
void M_Void_I2C_STOP(){
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    TWCR_REG=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
    1006:	e6 e5       	ldi	r30, 0x56	; 86
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	84 e9       	ldi	r24, 0x94	; 148
    100c:	80 83       	st	Z, r24
    while(TWCR_REG&(1<<TWSTO));				 /* Wait until stop condition execution */
    100e:	e6 e5       	ldi	r30, 0x56	; 86
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	80 71       	andi	r24, 0x10	; 16
    101a:	90 70       	andi	r25, 0x00	; 0
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	b9 f7       	brne	.-18     	; 0x100e <M_Void_I2C_STOP+0x10>
}
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	2a 97       	sbiw	r28, 0x0a	; 10
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9a e0       	ldi	r25, 0x0A	; 10
    1042:	69 2f       	mov	r22, r25
    1044:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1048:	89 2f       	mov	r24, r25
    104a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9a e0       	ldi	r25, 0x0A	; 10
    1050:	69 2f       	mov	r22, r25
    1052:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1056:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3a 87       	std	Y+10, r19	; 0x0a
    1060:	29 87       	std	Y+9, r18	; 0x09
    1062:	89 85       	ldd	r24, Y+9	; 0x09
    1064:	9a 85       	ldd	r25, Y+10	; 0x0a
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	39 f0       	breq	.+14     	; 0x1078 <M_DIO_Void_SetPinDirection+0x52>
    106a:	29 85       	ldd	r18, Y+9	; 0x09
    106c:	3a 85       	ldd	r19, Y+10	; 0x0a
    106e:	21 30       	cpi	r18, 0x01	; 1
    1070:	31 05       	cpc	r19, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <M_DIO_Void_SetPinDirection+0x50>
    1074:	76 c0       	rjmp	.+236    	; 0x1162 <M_DIO_Void_SetPinDirection+0x13c>
    1076:	e4 c0       	rjmp	.+456    	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	38 87       	std	Y+8, r19	; 0x08
    1080:	2f 83       	std	Y+7, r18	; 0x07
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	61 f1       	breq	.+88     	; 0x10e4 <M_DIO_Void_SetPinDirection+0xbe>
    108c:	2f 81       	ldd	r18, Y+7	; 0x07
    108e:	38 85       	ldd	r19, Y+8	; 0x08
    1090:	23 30       	cpi	r18, 0x03	; 3
    1092:	31 05       	cpc	r19, r1
    1094:	34 f4       	brge	.+12     	; 0x10a2 <M_DIO_Void_SetPinDirection+0x7c>
    1096:	8f 81       	ldd	r24, Y+7	; 0x07
    1098:	98 85       	ldd	r25, Y+8	; 0x08
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	91 05       	cpc	r25, r1
    109e:	69 f0       	breq	.+26     	; 0x10ba <M_DIO_Void_SetPinDirection+0x94>
    10a0:	cf c0       	rjmp	.+414    	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
    10a2:	2f 81       	ldd	r18, Y+7	; 0x07
    10a4:	38 85       	ldd	r19, Y+8	; 0x08
    10a6:	23 30       	cpi	r18, 0x03	; 3
    10a8:	31 05       	cpc	r19, r1
    10aa:	89 f1       	breq	.+98     	; 0x110e <M_DIO_Void_SetPinDirection+0xe8>
    10ac:	8f 81       	ldd	r24, Y+7	; 0x07
    10ae:	98 85       	ldd	r25, Y+8	; 0x08
    10b0:	84 30       	cpi	r24, 0x04	; 4
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <M_DIO_Void_SetPinDirection+0x92>
    10b6:	40 c0       	rjmp	.+128    	; 0x1138 <M_DIO_Void_SetPinDirection+0x112>
    10b8:	c3 c0       	rjmp	.+390    	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
    10ba:	aa e3       	ldi	r26, 0x3A	; 58
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	ea e3       	ldi	r30, 0x3A	; 58
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <M_DIO_Void_SetPinDirection+0xb2>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <M_DIO_Void_SetPinDirection+0xae>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	ae c0       	rjmp	.+348    	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
    10e4:	a7 e3       	ldi	r26, 0x37	; 55
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e7 e3       	ldi	r30, 0x37	; 55
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <M_DIO_Void_SetPinDirection+0xdc>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <M_DIO_Void_SetPinDirection+0xd8>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	99 c0       	rjmp	.+306    	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    110e:	a4 e3       	ldi	r26, 0x34	; 52
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e4 e3       	ldi	r30, 0x34	; 52
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <M_DIO_Void_SetPinDirection+0x106>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <M_DIO_Void_SetPinDirection+0x102>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	84 c0       	rjmp	.+264    	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    1138:	a1 e3       	ldi	r26, 0x31	; 49
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e1 e3       	ldi	r30, 0x31	; 49
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <M_DIO_Void_SetPinDirection+0x130>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <M_DIO_Void_SetPinDirection+0x12c>
    115a:	80 95       	com	r24
    115c:	84 23       	and	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	6f c0       	rjmp	.+222    	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3e 83       	std	Y+6, r19	; 0x06
    116a:	2d 83       	std	Y+5, r18	; 0x05
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	9e 81       	ldd	r25, Y+6	; 0x06
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	91 05       	cpc	r25, r1
    1174:	51 f1       	breq	.+84     	; 0x11ca <M_DIO_Void_SetPinDirection+0x1a4>
    1176:	2d 81       	ldd	r18, Y+5	; 0x05
    1178:	3e 81       	ldd	r19, Y+6	; 0x06
    117a:	23 30       	cpi	r18, 0x03	; 3
    117c:	31 05       	cpc	r19, r1
    117e:	34 f4       	brge	.+12     	; 0x118c <M_DIO_Void_SetPinDirection+0x166>
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	91 05       	cpc	r25, r1
    1188:	61 f0       	breq	.+24     	; 0x11a2 <M_DIO_Void_SetPinDirection+0x17c>
    118a:	5a c0       	rjmp	.+180    	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
    118c:	2d 81       	ldd	r18, Y+5	; 0x05
    118e:	3e 81       	ldd	r19, Y+6	; 0x06
    1190:	23 30       	cpi	r18, 0x03	; 3
    1192:	31 05       	cpc	r19, r1
    1194:	71 f1       	breq	.+92     	; 0x11f2 <M_DIO_Void_SetPinDirection+0x1cc>
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	91 05       	cpc	r25, r1
    119e:	e9 f1       	breq	.+122    	; 0x121a <M_DIO_Void_SetPinDirection+0x1f4>
    11a0:	4f c0       	rjmp	.+158    	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    11a2:	aa e3       	ldi	r26, 0x3A	; 58
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ea e3       	ldi	r30, 0x3A	; 58
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <M_DIO_Void_SetPinDirection+0x19a>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <M_DIO_Void_SetPinDirection+0x196>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	3b c0       	rjmp	.+118    	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    11ca:	a7 e3       	ldi	r26, 0x37	; 55
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e7 e3       	ldi	r30, 0x37	; 55
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <M_DIO_Void_SetPinDirection+0x1c2>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <M_DIO_Void_SetPinDirection+0x1be>
    11ec:	84 2b       	or	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	27 c0       	rjmp	.+78     	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    11f2:	a4 e3       	ldi	r26, 0x34	; 52
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e4 e3       	ldi	r30, 0x34	; 52
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <M_DIO_Void_SetPinDirection+0x1ea>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <M_DIO_Void_SetPinDirection+0x1e6>
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	13 c0       	rjmp	.+38     	; 0x1240 <M_DIO_Void_SetPinDirection+0x21a>
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    121a:	a1 e3       	ldi	r26, 0x31	; 49
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e1 e3       	ldi	r30, 0x31	; 49
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <M_DIO_Void_SetPinDirection+0x212>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <M_DIO_Void_SetPinDirection+0x20e>
    123c:	84 2b       	or	r24, r20
    123e:	8c 93       	st	X, r24
			default:                                break;
			}
			break;
			default:    break;
	}
}
    1240:	2a 96       	adiw	r28, 0x0a	; 10
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	2a 97       	sbiw	r28, 0x0a	; 10
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	8b 83       	std	Y+3, r24	; 0x03
    1268:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9a e0       	ldi	r25, 0x0A	; 10
    126e:	69 2f       	mov	r22, r25
    1270:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1274:	89 2f       	mov	r24, r25
    1276:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9a e0       	ldi	r25, 0x0A	; 10
    127c:	69 2f       	mov	r22, r25
    127e:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1282:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	3a 87       	std	Y+10, r19	; 0x0a
    128c:	29 87       	std	Y+9, r18	; 0x09
    128e:	89 85       	ldd	r24, Y+9	; 0x09
    1290:	9a 85       	ldd	r25, Y+10	; 0x0a
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	39 f0       	breq	.+14     	; 0x12a4 <M_DIO_Void_SetPinValue+0x52>
    1296:	29 85       	ldd	r18, Y+9	; 0x09
    1298:	3a 85       	ldd	r19, Y+10	; 0x0a
    129a:	21 30       	cpi	r18, 0x01	; 1
    129c:	31 05       	cpc	r19, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <M_DIO_Void_SetPinValue+0x50>
    12a0:	76 c0       	rjmp	.+236    	; 0x138e <M_DIO_Void_SetPinValue+0x13c>
    12a2:	e4 c0       	rjmp	.+456    	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	38 87       	std	Y+8, r19	; 0x08
    12ac:	2f 83       	std	Y+7, r18	; 0x07
    12ae:	8f 81       	ldd	r24, Y+7	; 0x07
    12b0:	98 85       	ldd	r25, Y+8	; 0x08
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	91 05       	cpc	r25, r1
    12b6:	61 f1       	breq	.+88     	; 0x1310 <M_DIO_Void_SetPinValue+0xbe>
    12b8:	2f 81       	ldd	r18, Y+7	; 0x07
    12ba:	38 85       	ldd	r19, Y+8	; 0x08
    12bc:	23 30       	cpi	r18, 0x03	; 3
    12be:	31 05       	cpc	r19, r1
    12c0:	34 f4       	brge	.+12     	; 0x12ce <M_DIO_Void_SetPinValue+0x7c>
    12c2:	8f 81       	ldd	r24, Y+7	; 0x07
    12c4:	98 85       	ldd	r25, Y+8	; 0x08
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	69 f0       	breq	.+26     	; 0x12e6 <M_DIO_Void_SetPinValue+0x94>
    12cc:	cf c0       	rjmp	.+414    	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
    12ce:	2f 81       	ldd	r18, Y+7	; 0x07
    12d0:	38 85       	ldd	r19, Y+8	; 0x08
    12d2:	23 30       	cpi	r18, 0x03	; 3
    12d4:	31 05       	cpc	r19, r1
    12d6:	89 f1       	breq	.+98     	; 0x133a <M_DIO_Void_SetPinValue+0xe8>
    12d8:	8f 81       	ldd	r24, Y+7	; 0x07
    12da:	98 85       	ldd	r25, Y+8	; 0x08
    12dc:	84 30       	cpi	r24, 0x04	; 4
    12de:	91 05       	cpc	r25, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <M_DIO_Void_SetPinValue+0x92>
    12e2:	40 c0       	rjmp	.+128    	; 0x1364 <M_DIO_Void_SetPinValue+0x112>
    12e4:	c3 c0       	rjmp	.+390    	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    12e6:	ab e3       	ldi	r26, 0x3B	; 59
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	eb e3       	ldi	r30, 0x3B	; 59
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <M_DIO_Void_SetPinValue+0xb2>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <M_DIO_Void_SetPinValue+0xae>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	ae c0       	rjmp	.+348    	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1310:	a8 e3       	ldi	r26, 0x38	; 56
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <M_DIO_Void_SetPinValue+0xdc>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <M_DIO_Void_SetPinValue+0xd8>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	99 c0       	rjmp	.+306    	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    133a:	a5 e3       	ldi	r26, 0x35	; 53
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <M_DIO_Void_SetPinValue+0x106>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <M_DIO_Void_SetPinValue+0x102>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	84 c0       	rjmp	.+264    	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1364:	a2 e3       	ldi	r26, 0x32	; 50
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e2 e3       	ldi	r30, 0x32	; 50
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <M_DIO_Void_SetPinValue+0x130>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <M_DIO_Void_SetPinValue+0x12c>
    1386:	80 95       	com	r24
    1388:	84 23       	and	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	6f c0       	rjmp	.+222    	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	3e 83       	std	Y+6, r19	; 0x06
    1396:	2d 83       	std	Y+5, r18	; 0x05
    1398:	8d 81       	ldd	r24, Y+5	; 0x05
    139a:	9e 81       	ldd	r25, Y+6	; 0x06
    139c:	82 30       	cpi	r24, 0x02	; 2
    139e:	91 05       	cpc	r25, r1
    13a0:	51 f1       	breq	.+84     	; 0x13f6 <M_DIO_Void_SetPinValue+0x1a4>
    13a2:	2d 81       	ldd	r18, Y+5	; 0x05
    13a4:	3e 81       	ldd	r19, Y+6	; 0x06
    13a6:	23 30       	cpi	r18, 0x03	; 3
    13a8:	31 05       	cpc	r19, r1
    13aa:	34 f4       	brge	.+12     	; 0x13b8 <M_DIO_Void_SetPinValue+0x166>
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	61 f0       	breq	.+24     	; 0x13ce <M_DIO_Void_SetPinValue+0x17c>
    13b6:	5a c0       	rjmp	.+180    	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
    13b8:	2d 81       	ldd	r18, Y+5	; 0x05
    13ba:	3e 81       	ldd	r19, Y+6	; 0x06
    13bc:	23 30       	cpi	r18, 0x03	; 3
    13be:	31 05       	cpc	r19, r1
    13c0:	71 f1       	breq	.+92     	; 0x141e <M_DIO_Void_SetPinValue+0x1cc>
    13c2:	8d 81       	ldd	r24, Y+5	; 0x05
    13c4:	9e 81       	ldd	r25, Y+6	; 0x06
    13c6:	84 30       	cpi	r24, 0x04	; 4
    13c8:	91 05       	cpc	r25, r1
    13ca:	e9 f1       	breq	.+122    	; 0x1446 <M_DIO_Void_SetPinValue+0x1f4>
    13cc:	4f c0       	rjmp	.+158    	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    13ce:	ab e3       	ldi	r26, 0x3B	; 59
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	eb e3       	ldi	r30, 0x3B	; 59
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <M_DIO_Void_SetPinValue+0x19a>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <M_DIO_Void_SetPinValue+0x196>
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	3b c0       	rjmp	.+118    	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    13f6:	a8 e3       	ldi	r26, 0x38	; 56
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e8 e3       	ldi	r30, 0x38	; 56
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <M_DIO_Void_SetPinValue+0x1c2>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <M_DIO_Void_SetPinValue+0x1be>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	27 c0       	rjmp	.+78     	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    141e:	a5 e3       	ldi	r26, 0x35	; 53
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e3       	ldi	r30, 0x35	; 53
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <M_DIO_Void_SetPinValue+0x1ea>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <M_DIO_Void_SetPinValue+0x1e6>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	13 c0       	rjmp	.+38     	; 0x146c <M_DIO_Void_SetPinValue+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1446:	a2 e3       	ldi	r26, 0x32	; 50
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e2 e3       	ldi	r30, 0x32	; 50
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <M_DIO_Void_SetPinValue+0x212>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <M_DIO_Void_SetPinValue+0x20e>
    1468:	84 2b       	or	r24, r20
    146a:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    146c:	2a 96       	adiw	r28, 0x0a	; 10
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <M_DIO_Void_GetPinValue+0x6>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <M_DIO_Void_GetPinValue+0x8>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <M_DIO_Void_GetPinValue+0xa>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9a e0       	ldi	r25, 0x0A	; 10
    1492:	69 2f       	mov	r22, r25
    1494:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1498:	89 2f       	mov	r24, r25
    149a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	9a e0       	ldi	r25, 0x0A	; 10
    14a0:	69 2f       	mov	r22, r25
    14a2:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    14a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    14a8:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3e 83       	std	Y+6, r19	; 0x06
    14b2:	2d 83       	std	Y+5, r18	; 0x05
    14b4:	4d 81       	ldd	r20, Y+5	; 0x05
    14b6:	5e 81       	ldd	r21, Y+6	; 0x06
    14b8:	42 30       	cpi	r20, 0x02	; 2
    14ba:	51 05       	cpc	r21, r1
    14bc:	41 f1       	breq	.+80     	; 0x150e <M_DIO_Void_GetPinValue+0x90>
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	91 05       	cpc	r25, r1
    14c6:	34 f4       	brge	.+12     	; 0x14d4 <M_DIO_Void_GetPinValue+0x56>
    14c8:	2d 81       	ldd	r18, Y+5	; 0x05
    14ca:	3e 81       	ldd	r19, Y+6	; 0x06
    14cc:	21 30       	cpi	r18, 0x01	; 1
    14ce:	31 05       	cpc	r19, r1
    14d0:	61 f0       	breq	.+24     	; 0x14ea <M_DIO_Void_GetPinValue+0x6c>
    14d2:	52 c0       	rjmp	.+164    	; 0x1578 <M_DIO_Void_GetPinValue+0xfa>
    14d4:	4d 81       	ldd	r20, Y+5	; 0x05
    14d6:	5e 81       	ldd	r21, Y+6	; 0x06
    14d8:	43 30       	cpi	r20, 0x03	; 3
    14da:	51 05       	cpc	r21, r1
    14dc:	51 f1       	breq	.+84     	; 0x1532 <M_DIO_Void_GetPinValue+0xb4>
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	91 05       	cpc	r25, r1
    14e6:	b9 f1       	breq	.+110    	; 0x1556 <M_DIO_Void_GetPinValue+0xd8>
    14e8:	47 c0       	rjmp	.+142    	; 0x1578 <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    14ea:	e9 e3       	ldi	r30, 0x39	; 57
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	a9 01       	movw	r20, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <M_DIO_Void_GetPinValue+0x84>
    14fe:	55 95       	asr	r21
    1500:	47 95       	ror	r20
    1502:	8a 95       	dec	r24
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <M_DIO_Void_GetPinValue+0x80>
    1506:	ca 01       	movw	r24, r20
    1508:	81 70       	andi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	35 c0       	rjmp	.+106    	; 0x1578 <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    150e:	e6 e3       	ldi	r30, 0x36	; 54
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a9 01       	movw	r20, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <M_DIO_Void_GetPinValue+0xa8>
    1522:	55 95       	asr	r21
    1524:	47 95       	ror	r20
    1526:	8a 95       	dec	r24
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <M_DIO_Void_GetPinValue+0xa4>
    152a:	ca 01       	movw	r24, r20
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	23 c0       	rjmp	.+70     	; 0x1578 <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1532:	e3 e3       	ldi	r30, 0x33	; 51
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a9 01       	movw	r20, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <M_DIO_Void_GetPinValue+0xcc>
    1546:	55 95       	asr	r21
    1548:	47 95       	ror	r20
    154a:	8a 95       	dec	r24
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <M_DIO_Void_GetPinValue+0xc8>
    154e:	ca 01       	movw	r24, r20
    1550:	81 70       	andi	r24, 0x01	; 1
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	11 c0       	rjmp	.+34     	; 0x1578 <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1556:	e0 e3       	ldi	r30, 0x30	; 48
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a9 01       	movw	r20, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <M_DIO_Void_GetPinValue+0xf0>
    156a:	55 95       	asr	r21
    156c:	47 95       	ror	r20
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <M_DIO_Void_GetPinValue+0xec>
    1572:	ca 01       	movw	r24, r20
    1574:	81 70       	andi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    1578:	89 81       	ldd	r24, Y+1	; 0x01
}
    157a:	26 96       	adiw	r28, 0x06	; 6
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <M_DIO_Void_TogPin+0x6>
    1592:	00 d0       	rcall	.+0      	; 0x1594 <M_DIO_Void_TogPin+0x8>
    1594:	0f 92       	push	r0
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9a e0       	ldi	r25, 0x0A	; 10
    15a0:	69 2f       	mov	r22, r25
    15a2:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    15a6:	89 2f       	mov	r24, r25
    15a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9a e0       	ldi	r25, 0x0A	; 10
    15ae:	69 2f       	mov	r22, r25
    15b0:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    15b4:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3d 83       	std	Y+5, r19	; 0x05
    15be:	2c 83       	std	Y+4, r18	; 0x04
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	91 05       	cpc	r25, r1
    15c8:	51 f1       	breq	.+84     	; 0x161e <M_DIO_Void_TogPin+0x92>
    15ca:	2c 81       	ldd	r18, Y+4	; 0x04
    15cc:	3d 81       	ldd	r19, Y+5	; 0x05
    15ce:	23 30       	cpi	r18, 0x03	; 3
    15d0:	31 05       	cpc	r19, r1
    15d2:	34 f4       	brge	.+12     	; 0x15e0 <M_DIO_Void_TogPin+0x54>
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	91 05       	cpc	r25, r1
    15dc:	61 f0       	breq	.+24     	; 0x15f6 <M_DIO_Void_TogPin+0x6a>
    15de:	5a c0       	rjmp	.+180    	; 0x1694 <M_DIO_Void_TogPin+0x108>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	23 30       	cpi	r18, 0x03	; 3
    15e6:	31 05       	cpc	r19, r1
    15e8:	71 f1       	breq	.+92     	; 0x1646 <M_DIO_Void_TogPin+0xba>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	84 30       	cpi	r24, 0x04	; 4
    15f0:	91 05       	cpc	r25, r1
    15f2:	e9 f1       	breq	.+122    	; 0x166e <M_DIO_Void_TogPin+0xe2>
    15f4:	4f c0       	rjmp	.+158    	; 0x1694 <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    15f6:	ab e3       	ldi	r26, 0x3B	; 59
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	eb e3       	ldi	r30, 0x3B	; 59
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <M_DIO_Void_TogPin+0x88>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <M_DIO_Void_TogPin+0x84>
    1618:	84 27       	eor	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	3b c0       	rjmp	.+118    	; 0x1694 <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    161e:	a8 e3       	ldi	r26, 0x38	; 56
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e8 e3       	ldi	r30, 0x38	; 56
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <M_DIO_Void_TogPin+0xb0>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <M_DIO_Void_TogPin+0xac>
    1640:	84 27       	eor	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	27 c0       	rjmp	.+78     	; 0x1694 <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    1646:	a5 e3       	ldi	r26, 0x35	; 53
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e5 e3       	ldi	r30, 0x35	; 53
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <M_DIO_Void_TogPin+0xd8>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <M_DIO_Void_TogPin+0xd4>
    1668:	84 27       	eor	r24, r20
    166a:	8c 93       	st	X, r24
    166c:	13 c0       	rjmp	.+38     	; 0x1694 <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    166e:	a2 e3       	ldi	r26, 0x32	; 50
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e2 e3       	ldi	r30, 0x32	; 50
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <M_DIO_Void_TogPin+0x100>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <M_DIO_Void_TogPin+0xfc>
    1690:	84 27       	eor	r24, r20
    1692:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	2a 97       	sbiw	r28, 0x0a	; 10
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9a e0       	ldi	r25, 0x0A	; 10
    16c0:	69 2f       	mov	r22, r25
    16c2:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    16c6:	89 2f       	mov	r24, r25
    16c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9a e0       	ldi	r25, 0x0A	; 10
    16ce:	69 2f       	mov	r22, r25
    16d0:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    16d4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	3a 87       	std	Y+10, r19	; 0x0a
    16de:	29 87       	std	Y+9, r18	; 0x09
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	39 f0       	breq	.+14     	; 0x16f6 <M_DIO_Void_SetPinPullUpRes+0x52>
    16e8:	29 85       	ldd	r18, Y+9	; 0x09
    16ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ec:	21 30       	cpi	r18, 0x01	; 1
    16ee:	31 05       	cpc	r19, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <M_DIO_Void_SetPinPullUpRes+0x50>
    16f2:	76 c0       	rjmp	.+236    	; 0x17e0 <M_DIO_Void_SetPinPullUpRes+0x13c>
    16f4:	e4 c0       	rjmp	.+456    	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	38 87       	std	Y+8, r19	; 0x08
    16fe:	2f 83       	std	Y+7, r18	; 0x07
    1700:	8f 81       	ldd	r24, Y+7	; 0x07
    1702:	98 85       	ldd	r25, Y+8	; 0x08
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	91 05       	cpc	r25, r1
    1708:	61 f1       	breq	.+88     	; 0x1762 <M_DIO_Void_SetPinPullUpRes+0xbe>
    170a:	2f 81       	ldd	r18, Y+7	; 0x07
    170c:	38 85       	ldd	r19, Y+8	; 0x08
    170e:	23 30       	cpi	r18, 0x03	; 3
    1710:	31 05       	cpc	r19, r1
    1712:	34 f4       	brge	.+12     	; 0x1720 <M_DIO_Void_SetPinPullUpRes+0x7c>
    1714:	8f 81       	ldd	r24, Y+7	; 0x07
    1716:	98 85       	ldd	r25, Y+8	; 0x08
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	91 05       	cpc	r25, r1
    171c:	69 f0       	breq	.+26     	; 0x1738 <M_DIO_Void_SetPinPullUpRes+0x94>
    171e:	cf c0       	rjmp	.+414    	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
    1720:	2f 81       	ldd	r18, Y+7	; 0x07
    1722:	38 85       	ldd	r19, Y+8	; 0x08
    1724:	23 30       	cpi	r18, 0x03	; 3
    1726:	31 05       	cpc	r19, r1
    1728:	89 f1       	breq	.+98     	; 0x178c <M_DIO_Void_SetPinPullUpRes+0xe8>
    172a:	8f 81       	ldd	r24, Y+7	; 0x07
    172c:	98 85       	ldd	r25, Y+8	; 0x08
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	91 05       	cpc	r25, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <M_DIO_Void_SetPinPullUpRes+0x92>
    1734:	40 c0       	rjmp	.+128    	; 0x17b6 <M_DIO_Void_SetPinPullUpRes+0x112>
    1736:	c3 c0       	rjmp	.+390    	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1738:	ab e3       	ldi	r26, 0x3B	; 59
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	eb e3       	ldi	r30, 0x3B	; 59
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	48 2f       	mov	r20, r24
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 2e       	mov	r0, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <M_DIO_Void_SetPinPullUpRes+0xb2>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	0a 94       	dec	r0
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <M_DIO_Void_SetPinPullUpRes+0xae>
    175a:	80 95       	com	r24
    175c:	84 23       	and	r24, r20
    175e:	8c 93       	st	X, r24
    1760:	ae c0       	rjmp	.+348    	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1762:	a8 e3       	ldi	r26, 0x38	; 56
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e8 e3       	ldi	r30, 0x38	; 56
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <M_DIO_Void_SetPinPullUpRes+0xdc>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <M_DIO_Void_SetPinPullUpRes+0xd8>
    1784:	80 95       	com	r24
    1786:	84 23       	and	r24, r20
    1788:	8c 93       	st	X, r24
    178a:	99 c0       	rjmp	.+306    	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    178c:	a5 e3       	ldi	r26, 0x35	; 53
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e5 e3       	ldi	r30, 0x35	; 53
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	48 2f       	mov	r20, r24
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <M_DIO_Void_SetPinPullUpRes+0x106>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <M_DIO_Void_SetPinPullUpRes+0x102>
    17ae:	80 95       	com	r24
    17b0:	84 23       	and	r24, r20
    17b2:	8c 93       	st	X, r24
    17b4:	84 c0       	rjmp	.+264    	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    17b6:	a2 e3       	ldi	r26, 0x32	; 50
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e2 e3       	ldi	r30, 0x32	; 50
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	48 2f       	mov	r20, r24
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	02 2e       	mov	r0, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <M_DIO_Void_SetPinPullUpRes+0x130>
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	0a 94       	dec	r0
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <M_DIO_Void_SetPinPullUpRes+0x12c>
    17d8:	80 95       	com	r24
    17da:	84 23       	and	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	6f c0       	rjmp	.+222    	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
		case ENABLE:
			switch(Local_U8_Group)
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	3e 83       	std	Y+6, r19	; 0x06
    17e8:	2d 83       	std	Y+5, r18	; 0x05
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	82 30       	cpi	r24, 0x02	; 2
    17f0:	91 05       	cpc	r25, r1
    17f2:	51 f1       	breq	.+84     	; 0x1848 <M_DIO_Void_SetPinPullUpRes+0x1a4>
    17f4:	2d 81       	ldd	r18, Y+5	; 0x05
    17f6:	3e 81       	ldd	r19, Y+6	; 0x06
    17f8:	23 30       	cpi	r18, 0x03	; 3
    17fa:	31 05       	cpc	r19, r1
    17fc:	34 f4       	brge	.+12     	; 0x180a <M_DIO_Void_SetPinPullUpRes+0x166>
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	91 05       	cpc	r25, r1
    1806:	61 f0       	breq	.+24     	; 0x1820 <M_DIO_Void_SetPinPullUpRes+0x17c>
    1808:	5a c0       	rjmp	.+180    	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
    180a:	2d 81       	ldd	r18, Y+5	; 0x05
    180c:	3e 81       	ldd	r19, Y+6	; 0x06
    180e:	23 30       	cpi	r18, 0x03	; 3
    1810:	31 05       	cpc	r19, r1
    1812:	71 f1       	breq	.+92     	; 0x1870 <M_DIO_Void_SetPinPullUpRes+0x1cc>
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	91 05       	cpc	r25, r1
    181c:	e9 f1       	breq	.+122    	; 0x1898 <M_DIO_Void_SetPinPullUpRes+0x1f4>
    181e:	4f c0       	rjmp	.+158    	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1820:	ab e3       	ldi	r26, 0x3B	; 59
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	eb e3       	ldi	r30, 0x3B	; 59
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <M_DIO_Void_SetPinPullUpRes+0x19a>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <M_DIO_Void_SetPinPullUpRes+0x196>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	3b c0       	rjmp	.+118    	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1848:	a8 e3       	ldi	r26, 0x38	; 56
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e8 e3       	ldi	r30, 0x38	; 56
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <M_DIO_Void_SetPinPullUpRes+0x1be>
    186a:	84 2b       	or	r24, r20
    186c:	8c 93       	st	X, r24
    186e:	27 c0       	rjmp	.+78     	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1870:	a5 e3       	ldi	r26, 0x35	; 53
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e5 e3       	ldi	r30, 0x35	; 53
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <M_DIO_Void_SetPinPullUpRes+0x1ea>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <M_DIO_Void_SetPinPullUpRes+0x1e6>
    1892:	84 2b       	or	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	13 c0       	rjmp	.+38     	; 0x18be <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1898:	a2 e3       	ldi	r26, 0x32	; 50
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e2 e3       	ldi	r30, 0x32	; 50
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <M_DIO_Void_SetPinPullUpRes+0x212>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <M_DIO_Void_SetPinPullUpRes+0x20e>
    18ba:	84 2b       	or	r24, r20
    18bc:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    18be:	2a 96       	adiw	r28, 0x0a	; 10
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <RTC_Init>:
#include "RTC_Inter.h"

u8 RTC_Day_str_display[7][4]={"SAT","SUN","MON","TUE","WEN","THU","FRI"};

void RTC_Init()
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
	M_Void_I2C_Init();
    18d8:	0e 94 02 07 	call	0xe04	; 0xe04 <M_Void_I2C_Init>
}
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <RTC_Set_Time>:
void RTC_Set_Time(Date_And_Time *Config_Date)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <RTC_Set_Time+0x6>
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
	M_U8_I2C_Start();/*send the start bit*/
    18f0:	0e 94 26 07 	call	0xe4c	; 0xe4c <M_U8_I2C_Start>
	/*send the slave address and write bit*/
	M_U8_I2C_SendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS_WRITE);
    18f4:	80 ed       	ldi	r24, 0xD0	; 208
    18f6:	0e 94 42 07 	call	0xe84	; 0xe84 <M_U8_I2C_SendSlaveAddressWithWrite>
	/*write the first address 0x00 in RTC to write the seconds*/
	M_U8_I2C_Write(RTC_SECONDS_REG_ADDRESS);
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	0e 94 b0 07 	call	0xf60	; 0xf60 <M_U8_I2C_Write>
	/*send the seconds and the CH bit is cleared*/
		/*send the units of seconds in the least 4 bits then the tens seconds in the higher 4 bits   */
	M_U8_I2C_Write((((Config_Date -> sec / 10) << 4)|((Config_Date -> sec) % 10)) & (~(1<<7)));
    1900:	e9 81       	ldd	r30, Y+1	; 0x01
    1902:	fa 81       	ldd	r31, Y+2	; 0x02
    1904:	80 81       	ld	r24, Z
    1906:	9a e0       	ldi	r25, 0x0A	; 10
    1908:	69 2f       	mov	r22, r25
    190a:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	82 95       	swap	r24
    1914:	92 95       	swap	r25
    1916:	90 7f       	andi	r25, 0xF0	; 240
    1918:	98 27       	eor	r25, r24
    191a:	80 7f       	andi	r24, 0xF0	; 240
    191c:	98 27       	eor	r25, r24
    191e:	28 2f       	mov	r18, r24
    1920:	e9 81       	ldd	r30, Y+1	; 0x01
    1922:	fa 81       	ldd	r31, Y+2	; 0x02
    1924:	80 81       	ld	r24, Z
    1926:	9a e0       	ldi	r25, 0x0A	; 10
    1928:	69 2f       	mov	r22, r25
    192a:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    192e:	89 2f       	mov	r24, r25
    1930:	82 2b       	or	r24, r18
    1932:	8f 77       	andi	r24, 0x7F	; 127
    1934:	0e 94 b0 07 	call	0xf60	; 0xf60 <M_U8_I2C_Write>

	/*send the units of mins in the least 4 bits then the tens mins in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> min / 10) << 4)|((Config_Date -> min) % 10));
    1938:	e9 81       	ldd	r30, Y+1	; 0x01
    193a:	fa 81       	ldd	r31, Y+2	; 0x02
    193c:	81 81       	ldd	r24, Z+1	; 0x01
    193e:	9a e0       	ldi	r25, 0x0A	; 10
    1940:	69 2f       	mov	r22, r25
    1942:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	82 95       	swap	r24
    194c:	92 95       	swap	r25
    194e:	90 7f       	andi	r25, 0xF0	; 240
    1950:	98 27       	eor	r25, r24
    1952:	80 7f       	andi	r24, 0xF0	; 240
    1954:	98 27       	eor	r25, r24
    1956:	28 2f       	mov	r18, r24
    1958:	e9 81       	ldd	r30, Y+1	; 0x01
    195a:	fa 81       	ldd	r31, Y+2	; 0x02
    195c:	81 81       	ldd	r24, Z+1	; 0x01
    195e:	9a e0       	ldi	r25, 0x0A	; 10
    1960:	69 2f       	mov	r22, r25
    1962:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1966:	89 2f       	mov	r24, r25
    1968:	82 2b       	or	r24, r18
    196a:	0e 94 b0 07 	call	0xf60	; 0xf60 <M_U8_I2C_Write>
#elif (_12_or_24_MODE == _12_Mode && PM_OR_AM == PM)
		/*send the units of hours in the least 4 bits then the tens hours in the higher 4 bits  ++  set the 6th bit for the 12 hours mode and the 5th bit for PM */
		M_U8_I2C_Write((((Config_Date -> hours / 10) << 4)|((Config_Date -> hours) % 10) | (1<<6))| ((1<<5)));
#elif _12_or_24_MODE == _24_Mode
		/*send the units of hours in the least 4 bits then the tens hours in the higher 4 bits  ++  clear the 6th bit for the 24 hours mode*/
	    M_U8_I2C_Write((((Config_Date -> hours / 10) << 4)|((Config_Date -> hours) % 10)) &(~(1<<6)));
    196e:	e9 81       	ldd	r30, Y+1	; 0x01
    1970:	fa 81       	ldd	r31, Y+2	; 0x02
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	9a e0       	ldi	r25, 0x0A	; 10
    1976:	69 2f       	mov	r22, r25
    1978:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	82 95       	swap	r24
    1982:	92 95       	swap	r25
    1984:	90 7f       	andi	r25, 0xF0	; 240
    1986:	98 27       	eor	r25, r24
    1988:	80 7f       	andi	r24, 0xF0	; 240
    198a:	98 27       	eor	r25, r24
    198c:	28 2f       	mov	r18, r24
    198e:	e9 81       	ldd	r30, Y+1	; 0x01
    1990:	fa 81       	ldd	r31, Y+2	; 0x02
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	9a e0       	ldi	r25, 0x0A	; 10
    1996:	69 2f       	mov	r22, r25
    1998:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    199c:	89 2f       	mov	r24, r25
    199e:	82 2b       	or	r24, r18
    19a0:	8f 7b       	andi	r24, 0xBF	; 191
    19a2:	0e 94 b0 07 	call	0xf60	; 0xf60 <M_U8_I2C_Write>
#endif

	    M_Void_I2C_STOP();
    19a6:	0e 94 ff 07 	call	0xffe	; 0xffe <M_Void_I2C_STOP>
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <RTC_Set_Date>:


void RTC_Set_Date(Date_And_Time *Config_Date)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <RTC_Set_Date+0x6>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01
	M_U8_I2C_Start();/*send the start bit*/
    19c2:	0e 94 26 07 	call	0xe4c	; 0xe4c <M_U8_I2C_Start>
	/*send the slave address and write bit*/
	M_U8_I2C_SendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS_WRITE);
    19c6:	80 ed       	ldi	r24, 0xD0	; 208
    19c8:	0e 94 42 07 	call	0xe84	; 0xe84 <M_U8_I2C_SendSlaveAddressWithWrite>
	/*write the first address 0x03 in RTC to write the day*/
	M_U8_I2C_Write(RTC_DAYS_REG_ADDRESS);
    19cc:	83 e0       	ldi	r24, 0x03	; 3
    19ce:	0e 94 b0 07 	call	0xf60	; 0xf60 <M_U8_I2C_Write>
		/*send the units of seconds in the least 4 bits then the tens seconds in the higher 4 bits   */
	M_U8_I2C_Write(Config_Date -> day);
    19d2:	e9 81       	ldd	r30, Y+1	; 0x01
    19d4:	fa 81       	ldd	r31, Y+2	; 0x02
    19d6:	83 81       	ldd	r24, Z+3	; 0x03
    19d8:	0e 94 b0 07 	call	0xf60	; 0xf60 <M_U8_I2C_Write>

	/*send the units of date in the least 4 bits then the tens date in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> date / 10) << 4)|((Config_Date -> date) % 10));
    19dc:	e9 81       	ldd	r30, Y+1	; 0x01
    19de:	fa 81       	ldd	r31, Y+2	; 0x02
    19e0:	84 81       	ldd	r24, Z+4	; 0x04
    19e2:	9a e0       	ldi	r25, 0x0A	; 10
    19e4:	69 2f       	mov	r22, r25
    19e6:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	82 95       	swap	r24
    19f0:	92 95       	swap	r25
    19f2:	90 7f       	andi	r25, 0xF0	; 240
    19f4:	98 27       	eor	r25, r24
    19f6:	80 7f       	andi	r24, 0xF0	; 240
    19f8:	98 27       	eor	r25, r24
    19fa:	28 2f       	mov	r18, r24
    19fc:	e9 81       	ldd	r30, Y+1	; 0x01
    19fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1a00:	84 81       	ldd	r24, Z+4	; 0x04
    1a02:	9a e0       	ldi	r25, 0x0A	; 10
    1a04:	69 2f       	mov	r22, r25
    1a06:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1a0a:	89 2f       	mov	r24, r25
    1a0c:	82 2b       	or	r24, r18
    1a0e:	0e 94 b0 07 	call	0xf60	; 0xf60 <M_U8_I2C_Write>
	/*send the units of month in the least 4 bits then the tens month in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> month / 10) << 4)|((Config_Date -> month) % 10));
    1a12:	e9 81       	ldd	r30, Y+1	; 0x01
    1a14:	fa 81       	ldd	r31, Y+2	; 0x02
    1a16:	85 81       	ldd	r24, Z+5	; 0x05
    1a18:	9a e0       	ldi	r25, 0x0A	; 10
    1a1a:	69 2f       	mov	r22, r25
    1a1c:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	82 95       	swap	r24
    1a26:	92 95       	swap	r25
    1a28:	90 7f       	andi	r25, 0xF0	; 240
    1a2a:	98 27       	eor	r25, r24
    1a2c:	80 7f       	andi	r24, 0xF0	; 240
    1a2e:	98 27       	eor	r25, r24
    1a30:	28 2f       	mov	r18, r24
    1a32:	e9 81       	ldd	r30, Y+1	; 0x01
    1a34:	fa 81       	ldd	r31, Y+2	; 0x02
    1a36:	85 81       	ldd	r24, Z+5	; 0x05
    1a38:	9a e0       	ldi	r25, 0x0A	; 10
    1a3a:	69 2f       	mov	r22, r25
    1a3c:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1a40:	89 2f       	mov	r24, r25
    1a42:	82 2b       	or	r24, r18
    1a44:	0e 94 b0 07 	call	0xf60	; 0xf60 <M_U8_I2C_Write>
	/*send the units of year in the least 4 bits then the tens year in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> year / 10) << 4)|((Config_Date -> year) % 10));
    1a48:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4c:	86 81       	ldd	r24, Z+6	; 0x06
    1a4e:	9a e0       	ldi	r25, 0x0A	; 10
    1a50:	69 2f       	mov	r22, r25
    1a52:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1a56:	88 2f       	mov	r24, r24
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	82 95       	swap	r24
    1a5c:	92 95       	swap	r25
    1a5e:	90 7f       	andi	r25, 0xF0	; 240
    1a60:	98 27       	eor	r25, r24
    1a62:	80 7f       	andi	r24, 0xF0	; 240
    1a64:	98 27       	eor	r25, r24
    1a66:	28 2f       	mov	r18, r24
    1a68:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6c:	86 81       	ldd	r24, Z+6	; 0x06
    1a6e:	9a e0       	ldi	r25, 0x0A	; 10
    1a70:	69 2f       	mov	r22, r25
    1a72:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodqi4>
    1a76:	89 2f       	mov	r24, r25
    1a78:	82 2b       	or	r24, r18
    1a7a:	0e 94 b0 07 	call	0xf60	; 0xf60 <M_U8_I2C_Write>
	M_Void_I2C_STOP();
    1a7e:	0e 94 ff 07 	call	0xffe	; 0xffe <M_Void_I2C_STOP>
}
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <RTC_Get_Time>:

void RTC_Get_Time(Date_And_Time *Get_Time_And_Date)
{
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <RTC_Get_Time+0x6>
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <RTC_Get_Time+0x8>
    1a94:	0f 92       	push	r0
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	9d 83       	std	Y+5, r25	; 0x05
    1a9c:	8c 83       	std	Y+4, r24	; 0x04
	u8 temp_sec =0;
    1a9e:	1b 82       	std	Y+3, r1	; 0x03
	u8 temp_min =0;
    1aa0:	1a 82       	std	Y+2, r1	; 0x02
	u8 temp_hours =0;
    1aa2:	19 82       	std	Y+1, r1	; 0x01

	M_U8_I2C_Start();/*send the start bit*/
    1aa4:	0e 94 26 07 	call	0xe4c	; 0xe4c <M_U8_I2C_Start>
	/*send the slave address and write bit*/
	M_U8_I2C_SendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS_WRITE);
    1aa8:	80 ed       	ldi	r24, 0xD0	; 208
    1aaa:	0e 94 42 07 	call	0xe84	; 0xe84 <M_U8_I2C_SendSlaveAddressWithWrite>
	/*write the first address 0x00 in RTC to write the day*/
	M_U8_I2C_Write(RTC_SECONDS_REG_ADDRESS);
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	0e 94 b0 07 	call	0xf60	; 0xf60 <M_U8_I2C_Write>
	M_U8_I2C_Repeated_Start();
    1ab4:	0e 94 6b 07 	call	0xed6	; 0xed6 <M_U8_I2C_Repeated_Start>
	/*send the slave address and read bit*/
	M_U8_I2C_SendSlaveAddressWithRead(RTC_SLAVE_ADDRESS_READ);
    1ab8:	81 ed       	ldi	r24, 0xD1	; 209
    1aba:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_U8_I2C_SendSlaveAddressWithRead>
	temp_sec = M_U8_I2C_ReadWithAck();
    1abe:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <M_U8_I2C_ReadWithAck>
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
	/*get the seconds units + the tens seconds by >>4 then multiplied by 10*/
	Get_Time_And_Date -> sec = (temp_sec & 0x0F)+(((temp_sec & 0xF0)>>4)*10);
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	4f 70       	andi	r20, 0x0F	; 15
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	82 95       	swap	r24
    1ace:	8f 70       	andi	r24, 0x0F	; 15
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	90 70       	andi	r25, 0x00	; 0
    1ad6:	9c 01       	movw	r18, r24
    1ad8:	22 0f       	add	r18, r18
    1ada:	33 1f       	adc	r19, r19
    1adc:	c9 01       	movw	r24, r18
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	82 0f       	add	r24, r18
    1ae8:	93 1f       	adc	r25, r19
    1aea:	84 0f       	add	r24, r20
    1aec:	ec 81       	ldd	r30, Y+4	; 0x04
    1aee:	fd 81       	ldd	r31, Y+5	; 0x05
    1af0:	80 83       	st	Z, r24
	/*get the mins units + the tens mins by >>4 then multiplied by 10*/
	temp_min = M_U8_I2C_ReadWithAck();
    1af2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <M_U8_I2C_ReadWithAck>
    1af6:	8a 83       	std	Y+2, r24	; 0x02
	Get_Time_And_Date -> min = (temp_min & 0x0F)+(((temp_min & 0xF0)>>4)*10);
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	48 2f       	mov	r20, r24
    1afc:	4f 70       	andi	r20, 0x0F	; 15
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	82 95       	swap	r24
    1b02:	8f 70       	andi	r24, 0x0F	; 15
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	90 70       	andi	r25, 0x00	; 0
    1b0a:	9c 01       	movw	r18, r24
    1b0c:	22 0f       	add	r18, r18
    1b0e:	33 1f       	adc	r19, r19
    1b10:	c9 01       	movw	r24, r18
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	82 0f       	add	r24, r18
    1b1c:	93 1f       	adc	r25, r19
    1b1e:	84 0f       	add	r24, r20
    1b20:	ec 81       	ldd	r30, Y+4	; 0x04
    1b22:	fd 81       	ldd	r31, Y+5	; 0x05
    1b24:	81 83       	std	Z+1, r24	; 0x01
	/*get the hours units + the tens hours by >>4 then multiplied by 10*/
	temp_hours = M_U8_I2C_ReadWithNack();
    1b26:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <M_U8_I2C_ReadWithNack>
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	Get_Time_And_Date -> hours = (temp_hours & 0x0F)+(((temp_hours & 0xF0)>>4)*10);
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	48 2f       	mov	r20, r24
    1b30:	4f 70       	andi	r20, 0x0F	; 15
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	82 95       	swap	r24
    1b36:	8f 70       	andi	r24, 0x0F	; 15
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	90 70       	andi	r25, 0x00	; 0
    1b3e:	9c 01       	movw	r18, r24
    1b40:	22 0f       	add	r18, r18
    1b42:	33 1f       	adc	r19, r19
    1b44:	c9 01       	movw	r24, r18
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	82 0f       	add	r24, r18
    1b50:	93 1f       	adc	r25, r19
    1b52:	84 0f       	add	r24, r20
    1b54:	ec 81       	ldd	r30, Y+4	; 0x04
    1b56:	fd 81       	ldd	r31, Y+5	; 0x05
    1b58:	82 83       	std	Z+2, r24	; 0x02
	M_Void_I2C_STOP();
    1b5a:	0e 94 ff 07 	call	0xffe	; 0xffe <M_Void_I2C_STOP>
}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <RTC_Get_Date>:



void RTC_Get_Date(Date_And_Time *Get_Time_And_Date)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <RTC_Get_Date+0x6>
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <RTC_Get_Date+0x8>
    1b76:	0f 92       	push	r0
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	9d 83       	std	Y+5, r25	; 0x05
    1b7e:	8c 83       	std	Y+4, r24	; 0x04
	u8 temp_date =0;
    1b80:	1b 82       	std	Y+3, r1	; 0x03
	u8 temp_month =0;
    1b82:	1a 82       	std	Y+2, r1	; 0x02
	u8 temp_year =0;
    1b84:	19 82       	std	Y+1, r1	; 0x01

	M_U8_I2C_Start();/*send the start bit*/
    1b86:	0e 94 26 07 	call	0xe4c	; 0xe4c <M_U8_I2C_Start>
	/*send the slave address and write bit*/
	M_U8_I2C_SendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS_WRITE);
    1b8a:	80 ed       	ldi	r24, 0xD0	; 208
    1b8c:	0e 94 42 07 	call	0xe84	; 0xe84 <M_U8_I2C_SendSlaveAddressWithWrite>
	/*write the first address 0x03 in RTC to write the day*/
	M_U8_I2C_Write(RTC_DAYS_REG_ADDRESS);
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	0e 94 b0 07 	call	0xf60	; 0xf60 <M_U8_I2C_Write>
	M_U8_I2C_Repeated_Start();
    1b96:	0e 94 6b 07 	call	0xed6	; 0xed6 <M_U8_I2C_Repeated_Start>
	/*send the slave address and read bit*/
	M_U8_I2C_SendSlaveAddressWithRead(RTC_SLAVE_ADDRESS_READ);
    1b9a:	81 ed       	ldi	r24, 0xD1	; 209
    1b9c:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_U8_I2C_SendSlaveAddressWithRead>
	Get_Time_And_Date -> day  = M_U8_I2C_ReadWithAck();
    1ba0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <M_U8_I2C_ReadWithAck>
    1ba4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ba6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ba8:	83 83       	std	Z+3, r24	; 0x03

	temp_date = M_U8_I2C_ReadWithAck();
    1baa:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <M_U8_I2C_ReadWithAck>
    1bae:	8b 83       	std	Y+3, r24	; 0x03
	/*get the seconds units + the tens seconds by >>4 then multiplied by 10*/
	Get_Time_And_Date -> date = (temp_date & 0x0F)+(((temp_date>>4)& 0x0F)*10);
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	4f 70       	andi	r20, 0x0F	; 15
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	82 95       	swap	r24
    1bba:	8f 70       	andi	r24, 0x0F	; 15
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9c 01       	movw	r18, r24
    1bc2:	22 0f       	add	r18, r18
    1bc4:	33 1f       	adc	r19, r19
    1bc6:	c9 01       	movw	r24, r18
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	82 0f       	add	r24, r18
    1bd2:	93 1f       	adc	r25, r19
    1bd4:	84 0f       	add	r24, r20
    1bd6:	ec 81       	ldd	r30, Y+4	; 0x04
    1bd8:	fd 81       	ldd	r31, Y+5	; 0x05
    1bda:	84 83       	std	Z+4, r24	; 0x04
	/*get the mins units + the tens mins by >>4 then multiplied by 10*/
	temp_month = M_U8_I2C_ReadWithAck();
    1bdc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <M_U8_I2C_ReadWithAck>
    1be0:	8a 83       	std	Y+2, r24	; 0x02
	Get_Time_And_Date -> month = (temp_month & 0x0F)+(((temp_month>>4)& 0x0F)*10);
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	48 2f       	mov	r20, r24
    1be6:	4f 70       	andi	r20, 0x0F	; 15
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	82 95       	swap	r24
    1bec:	8f 70       	andi	r24, 0x0F	; 15
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	9c 01       	movw	r18, r24
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	c9 01       	movw	r24, r18
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	82 0f       	add	r24, r18
    1c04:	93 1f       	adc	r25, r19
    1c06:	84 0f       	add	r24, r20
    1c08:	ec 81       	ldd	r30, Y+4	; 0x04
    1c0a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c0c:	85 83       	std	Z+5, r24	; 0x05
	/*get the hours units + the tens hours by >>4 then multiplied by 10*/
	temp_year = M_U8_I2C_ReadWithNack();
    1c0e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <M_U8_I2C_ReadWithNack>
    1c12:	89 83       	std	Y+1, r24	; 0x01
	Get_Time_And_Date -> year = (temp_year & 0x0F)+(((temp_year>>4)& 0x0F)*10);
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	48 2f       	mov	r20, r24
    1c18:	4f 70       	andi	r20, 0x0F	; 15
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	82 95       	swap	r24
    1c1e:	8f 70       	andi	r24, 0x0F	; 15
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9c 01       	movw	r18, r24
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	c9 01       	movw	r24, r18
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	82 0f       	add	r24, r18
    1c36:	93 1f       	adc	r25, r19
    1c38:	84 0f       	add	r24, r20
    1c3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1c3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1c3e:	86 83       	std	Z+6, r24	; 0x06
	M_Void_I2C_STOP();
    1c40:	0e 94 ff 07 	call	0xffe	; 0xffe <M_Void_I2C_STOP>
}
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    1c5c:	84 e1       	ldi	r24, 0x14	; 20
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	0e 94 13 08 	call	0x1026	; 0x1026 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1c64:	85 e1       	ldi	r24, 0x15	; 21
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	0e 94 13 08 	call	0x1026	; 0x1026 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    1c6c:	86 e1       	ldi	r24, 0x16	; 22
    1c6e:	61 e0       	ldi	r22, 0x01	; 1
    1c70:	0e 94 13 08 	call	0x1026	; 0x1026 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1c74:	88 e1       	ldi	r24, 0x18	; 24
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	0e 94 13 08 	call	0x1026	; 0x1026 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    1c7c:	8d e0       	ldi	r24, 0x0D	; 13
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	0e 94 13 08 	call	0x1026	; 0x1026 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1c84:	8c e0       	ldi	r24, 0x0C	; 12
    1c86:	61 e0       	ldi	r22, 0x01	; 1
    1c88:	0e 94 13 08 	call	0x1026	; 0x1026 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    1c8c:	83 e3       	ldi	r24, 0x33	; 51
    1c8e:	0e 94 94 10 	call	0x2128	; 0x2128 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    1c92:	82 e3       	ldi	r24, 0x32	; 50
    1c94:	0e 94 94 10 	call	0x2128	; 0x2128 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    1c98:	88 e2       	ldi	r24, 0x28	; 40
    1c9a:	0e 94 94 10 	call	0x2128	; 0x2128 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    1c9e:	8c e0       	ldi	r24, 0x0C	; 12
    1ca0:	0e 94 94 10 	call	0x2128	; 0x2128 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	0e 94 94 10 	call	0x2128	; 0x2128 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	0e 94 94 10 	call	0x2128	; 0x2128 <H_Lcd_Void_LCDWriteCommand>


#endif
}
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	e9 97       	sbiw	r28, 0x39	; 57
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    1ccc:	8d e0       	ldi	r24, 0x0D	; 13
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    1cd4:	89 ad       	ldd	r24, Y+57	; 0x39
    1cd6:	82 95       	swap	r24
    1cd8:	8f 70       	andi	r24, 0x0F	; 15
    1cda:	98 2f       	mov	r25, r24
    1cdc:	91 70       	andi	r25, 0x01	; 1
    1cde:	84 e1       	ldi	r24, 0x14	; 20
    1ce0:	69 2f       	mov	r22, r25
    1ce2:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    1ce6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ce8:	82 95       	swap	r24
    1cea:	86 95       	lsr	r24
    1cec:	87 70       	andi	r24, 0x07	; 7
    1cee:	98 2f       	mov	r25, r24
    1cf0:	91 70       	andi	r25, 0x01	; 1
    1cf2:	85 e1       	ldi	r24, 0x15	; 21
    1cf4:	69 2f       	mov	r22, r25
    1cf6:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    1cfa:	89 ad       	ldd	r24, Y+57	; 0x39
    1cfc:	82 95       	swap	r24
    1cfe:	86 95       	lsr	r24
    1d00:	86 95       	lsr	r24
    1d02:	83 70       	andi	r24, 0x03	; 3
    1d04:	98 2f       	mov	r25, r24
    1d06:	91 70       	andi	r25, 0x01	; 1
    1d08:	86 e1       	ldi	r24, 0x16	; 22
    1d0a:	69 2f       	mov	r22, r25
    1d0c:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    1d10:	89 ad       	ldd	r24, Y+57	; 0x39
    1d12:	98 2f       	mov	r25, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	99 27       	eor	r25, r25
    1d18:	99 1f       	adc	r25, r25
    1d1a:	88 e1       	ldi	r24, 0x18	; 24
    1d1c:	69 2f       	mov	r22, r25
    1d1e:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1d22:	8c e0       	ldi	r24, 0x0C	; 12
    1d24:	61 e0       	ldi	r22, 0x01	; 1
    1d26:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a0 e8       	ldi	r26, 0x80	; 128
    1d30:	bf e3       	ldi	r27, 0x3F	; 63
    1d32:	8d ab       	std	Y+53, r24	; 0x35
    1d34:	9e ab       	std	Y+54, r25	; 0x36
    1d36:	af ab       	std	Y+55, r26	; 0x37
    1d38:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d3c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d3e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d40:	98 ad       	ldd	r25, Y+56	; 0x38
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	4a e7       	ldi	r20, 0x7A	; 122
    1d48:	55 e4       	ldi	r21, 0x45	; 69
    1d4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	89 ab       	std	Y+49, r24	; 0x31
    1d54:	9a ab       	std	Y+50, r25	; 0x32
    1d56:	ab ab       	std	Y+51, r26	; 0x33
    1d58:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d60:	9c a9       	ldd	r25, Y+52	; 0x34
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	5f e3       	ldi	r21, 0x3F	; 63
    1d6a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	2c f4       	brge	.+10     	; 0x1d7c <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	98 ab       	std	Y+48, r25	; 0x30
    1d78:	8f a7       	std	Y+47, r24	; 0x2f
    1d7a:	3f c0       	rjmp	.+126    	; 0x1dfa <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    1d7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d80:	8b a9       	ldd	r24, Y+51	; 0x33
    1d82:	9c a9       	ldd	r25, Y+52	; 0x34
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	4f e7       	ldi	r20, 0x7F	; 127
    1d8a:	57 e4       	ldi	r21, 0x47	; 71
    1d8c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d90:	18 16       	cp	r1, r24
    1d92:	4c f5       	brge	.+82     	; 0x1de6 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d94:	6d a9       	ldd	r22, Y+53	; 0x35
    1d96:	7e a9       	ldd	r23, Y+54	; 0x36
    1d98:	8f a9       	ldd	r24, Y+55	; 0x37
    1d9a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e2       	ldi	r20, 0x20	; 32
    1da2:	51 e4       	ldi	r21, 0x41	; 65
    1da4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	98 ab       	std	Y+48, r25	; 0x30
    1dba:	8f a7       	std	Y+47, r24	; 0x2f
    1dbc:	0f c0       	rjmp	.+30     	; 0x1ddc <H_Lcd_Void_LCDWriteCharacter+0x126>
    1dbe:	80 e9       	ldi	r24, 0x90	; 144
    1dc0:	91 e0       	ldi	r25, 0x01	; 1
    1dc2:	9e a7       	std	Y+46, r25	; 0x2e
    1dc4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dc6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <H_Lcd_Void_LCDWriteCharacter+0x114>
    1dce:	9e a7       	std	Y+46, r25	; 0x2e
    1dd0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	98 ab       	std	Y+48, r25	; 0x30
    1dda:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ddc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dde:	98 a9       	ldd	r25, Y+48	; 0x30
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	69 f7       	brne	.-38     	; 0x1dbe <H_Lcd_Void_LCDWriteCharacter+0x108>
    1de4:	14 c0       	rjmp	.+40     	; 0x1e0e <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de6:	69 a9       	ldd	r22, Y+49	; 0x31
    1de8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dea:	8b a9       	ldd	r24, Y+51	; 0x33
    1dec:	9c a9       	ldd	r25, Y+52	; 0x34
    1dee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	98 ab       	std	Y+48, r25	; 0x30
    1df8:	8f a7       	std	Y+47, r24	; 0x2f
    1dfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfe:	9c a7       	std	Y+44, r25	; 0x2c
    1e00:	8b a7       	std	Y+43, r24	; 0x2b
    1e02:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e04:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <H_Lcd_Void_LCDWriteCharacter+0x150>
    1e0a:	9c a7       	std	Y+44, r25	; 0x2c
    1e0c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1e0e:	8c e0       	ldi	r24, 0x0C	; 12
    1e10:	60 e0       	ldi	r22, 0x00	; 0
    1e12:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 e8       	ldi	r26, 0x80	; 128
    1e1c:	bf e3       	ldi	r27, 0x3F	; 63
    1e1e:	8f a3       	std	Y+39, r24	; 0x27
    1e20:	98 a7       	std	Y+40, r25	; 0x28
    1e22:	a9 a7       	std	Y+41, r26	; 0x29
    1e24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6f a1       	ldd	r22, Y+39	; 0x27
    1e28:	78 a5       	ldd	r23, Y+40	; 0x28
    1e2a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a e7       	ldi	r20, 0x7A	; 122
    1e34:	55 e4       	ldi	r21, 0x45	; 69
    1e36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8b a3       	std	Y+35, r24	; 0x23
    1e40:	9c a3       	std	Y+36, r25	; 0x24
    1e42:	ad a3       	std	Y+37, r26	; 0x25
    1e44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e46:	6b a1       	ldd	r22, Y+35	; 0x23
    1e48:	7c a1       	ldd	r23, Y+36	; 0x24
    1e4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9a a3       	std	Y+34, r25	; 0x22
    1e64:	89 a3       	std	Y+33, r24	; 0x21
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    1e68:	6b a1       	ldd	r22, Y+35	; 0x23
    1e6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6f a1       	ldd	r22, Y+39	; 0x27
    1e82:	78 a5       	ldd	r23, Y+40	; 0x28
    1e84:	89 a5       	ldd	r24, Y+41	; 0x29
    1e86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9a a3       	std	Y+34, r25	; 0x22
    1ea6:	89 a3       	std	Y+33, r24	; 0x21
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <H_Lcd_Void_LCDWriteCharacter+0x212>
    1eaa:	80 e9       	ldi	r24, 0x90	; 144
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	98 a3       	std	Y+32, r25	; 0x20
    1eb0:	8f 8f       	std	Y+31, r24	; 0x1f
    1eb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eb4:	98 a1       	ldd	r25, Y+32	; 0x20
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <H_Lcd_Void_LCDWriteCharacter+0x200>
    1eba:	98 a3       	std	Y+32, r25	; 0x20
    1ebc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9a a3       	std	Y+34, r25	; 0x22
    1ec6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eca:	9a a1       	ldd	r25, Y+34	; 0x22
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9a a3       	std	Y+34, r25	; 0x22
    1ee4:	89 a3       	std	Y+33, r24	; 0x21
    1ee6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eea:	9e 8f       	std	Y+30, r25	; 0x1e
    1eec:	8d 8f       	std	Y+29, r24	; 0x1d
    1eee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ef0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <H_Lcd_Void_LCDWriteCharacter+0x23c>
    1ef6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ef8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    1efa:	89 ad       	ldd	r24, Y+57	; 0x39
    1efc:	98 2f       	mov	r25, r24
    1efe:	91 70       	andi	r25, 0x01	; 1
    1f00:	84 e1       	ldi	r24, 0x14	; 20
    1f02:	69 2f       	mov	r22, r25
    1f04:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    1f08:	89 ad       	ldd	r24, Y+57	; 0x39
    1f0a:	86 95       	lsr	r24
    1f0c:	98 2f       	mov	r25, r24
    1f0e:	91 70       	andi	r25, 0x01	; 1
    1f10:	85 e1       	ldi	r24, 0x15	; 21
    1f12:	69 2f       	mov	r22, r25
    1f14:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    1f18:	89 ad       	ldd	r24, Y+57	; 0x39
    1f1a:	86 95       	lsr	r24
    1f1c:	86 95       	lsr	r24
    1f1e:	98 2f       	mov	r25, r24
    1f20:	91 70       	andi	r25, 0x01	; 1
    1f22:	86 e1       	ldi	r24, 0x16	; 22
    1f24:	69 2f       	mov	r22, r25
    1f26:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    1f2a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f2c:	86 95       	lsr	r24
    1f2e:	86 95       	lsr	r24
    1f30:	86 95       	lsr	r24
    1f32:	98 2f       	mov	r25, r24
    1f34:	91 70       	andi	r25, 0x01	; 1
    1f36:	88 e1       	ldi	r24, 0x18	; 24
    1f38:	69 2f       	mov	r22, r25
    1f3a:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1f3e:	8c e0       	ldi	r24, 0x0C	; 12
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e8       	ldi	r26, 0x80	; 128
    1f4c:	bf e3       	ldi	r27, 0x3F	; 63
    1f4e:	89 8f       	std	Y+25, r24	; 0x19
    1f50:	9a 8f       	std	Y+26, r25	; 0x1a
    1f52:	ab 8f       	std	Y+27, r26	; 0x1b
    1f54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f56:	69 8d       	ldd	r22, Y+25	; 0x19
    1f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	4a e7       	ldi	r20, 0x7A	; 122
    1f64:	55 e4       	ldi	r21, 0x45	; 69
    1f66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	8d 8b       	std	Y+21, r24	; 0x15
    1f70:	9e 8b       	std	Y+22, r25	; 0x16
    1f72:	af 8b       	std	Y+23, r26	; 0x17
    1f74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f76:	6d 89       	ldd	r22, Y+21	; 0x15
    1f78:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e8       	ldi	r20, 0x80	; 128
    1f84:	5f e3       	ldi	r21, 0x3F	; 63
    1f86:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f8a:	88 23       	and	r24, r24
    1f8c:	2c f4       	brge	.+10     	; 0x1f98 <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9c 8b       	std	Y+20, r25	; 0x14
    1f94:	8b 8b       	std	Y+19, r24	; 0x13
    1f96:	3f c0       	rjmp	.+126    	; 0x2016 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    1f98:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	3f ef       	ldi	r19, 0xFF	; 255
    1fa4:	4f e7       	ldi	r20, 0x7F	; 127
    1fa6:	57 e4       	ldi	r21, 0x47	; 71
    1fa8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fac:	18 16       	cp	r1, r24
    1fae:	4c f5       	brge	.+82     	; 0x2002 <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e2       	ldi	r20, 0x20	; 32
    1fbe:	51 e4       	ldi	r21, 0x41	; 65
    1fc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9c 8b       	std	Y+20, r25	; 0x14
    1fd6:	8b 8b       	std	Y+19, r24	; 0x13
    1fd8:	0f c0       	rjmp	.+30     	; 0x1ff8 <H_Lcd_Void_LCDWriteCharacter+0x342>
    1fda:	80 e9       	ldi	r24, 0x90	; 144
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	9a 8b       	std	Y+18, r25	; 0x12
    1fe0:	89 8b       	std	Y+17, r24	; 0x11
    1fe2:	89 89       	ldd	r24, Y+17	; 0x11
    1fe4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <H_Lcd_Void_LCDWriteCharacter+0x330>
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	9c 8b       	std	Y+20, r25	; 0x14
    1ff6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	69 f7       	brne	.-38     	; 0x1fda <H_Lcd_Void_LCDWriteCharacter+0x324>
    2000:	14 c0       	rjmp	.+40     	; 0x202a <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2002:	6d 89       	ldd	r22, Y+21	; 0x15
    2004:	7e 89       	ldd	r23, Y+22	; 0x16
    2006:	8f 89       	ldd	r24, Y+23	; 0x17
    2008:	98 8d       	ldd	r25, Y+24	; 0x18
    200a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	9c 8b       	std	Y+20, r25	; 0x14
    2014:	8b 8b       	std	Y+19, r24	; 0x13
    2016:	8b 89       	ldd	r24, Y+19	; 0x13
    2018:	9c 89       	ldd	r25, Y+20	; 0x14
    201a:	98 8b       	std	Y+16, r25	; 0x10
    201c:	8f 87       	std	Y+15, r24	; 0x0f
    201e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2020:	98 89       	ldd	r25, Y+16	; 0x10
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <H_Lcd_Void_LCDWriteCharacter+0x36c>
    2026:	98 8b       	std	Y+16, r25	; 0x10
    2028:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    202a:	8c e0       	ldi	r24, 0x0C	; 12
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	a0 ea       	ldi	r26, 0xA0	; 160
    2038:	b0 e4       	ldi	r27, 0x40	; 64
    203a:	8b 87       	std	Y+11, r24	; 0x0b
    203c:	9c 87       	std	Y+12, r25	; 0x0c
    203e:	ad 87       	std	Y+13, r26	; 0x0d
    2040:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2042:	6b 85       	ldd	r22, Y+11	; 0x0b
    2044:	7c 85       	ldd	r23, Y+12	; 0x0c
    2046:	8d 85       	ldd	r24, Y+13	; 0x0d
    2048:	9e 85       	ldd	r25, Y+14	; 0x0e
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	4a e7       	ldi	r20, 0x7A	; 122
    2050:	55 e4       	ldi	r21, 0x45	; 69
    2052:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	8f 83       	std	Y+7, r24	; 0x07
    205c:	98 87       	std	Y+8, r25	; 0x08
    205e:	a9 87       	std	Y+9, r26	; 0x09
    2060:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2062:	6f 81       	ldd	r22, Y+7	; 0x07
    2064:	78 85       	ldd	r23, Y+8	; 0x08
    2066:	89 85       	ldd	r24, Y+9	; 0x09
    2068:	9a 85       	ldd	r25, Y+10	; 0x0a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e8       	ldi	r20, 0x80	; 128
    2070:	5f e3       	ldi	r21, 0x3F	; 63
    2072:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2076:	88 23       	and	r24, r24
    2078:	2c f4       	brge	.+10     	; 0x2084 <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	3f c0       	rjmp	.+126    	; 0x2102 <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    2084:	6f 81       	ldd	r22, Y+7	; 0x07
    2086:	78 85       	ldd	r23, Y+8	; 0x08
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	9a 85       	ldd	r25, Y+10	; 0x0a
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	3f ef       	ldi	r19, 0xFF	; 255
    2090:	4f e7       	ldi	r20, 0x7F	; 127
    2092:	57 e4       	ldi	r21, 0x47	; 71
    2094:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2098:	18 16       	cp	r1, r24
    209a:	4c f5       	brge	.+82     	; 0x20ee <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209c:	6b 85       	ldd	r22, Y+11	; 0x0b
    209e:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e2       	ldi	r20, 0x20	; 32
    20aa:	51 e4       	ldi	r21, 0x41	; 65
    20ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	9e 83       	std	Y+6, r25	; 0x06
    20c2:	8d 83       	std	Y+5, r24	; 0x05
    20c4:	0f c0       	rjmp	.+30     	; 0x20e4 <H_Lcd_Void_LCDWriteCharacter+0x42e>
    20c6:	80 e9       	ldi	r24, 0x90	; 144
    20c8:	91 e0       	ldi	r25, 0x01	; 1
    20ca:	9c 83       	std	Y+4, r25	; 0x04
    20cc:	8b 83       	std	Y+3, r24	; 0x03
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <H_Lcd_Void_LCDWriteCharacter+0x41c>
    20d6:	9c 83       	std	Y+4, r25	; 0x04
    20d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	9e 81       	ldd	r25, Y+6	; 0x06
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	9e 81       	ldd	r25, Y+6	; 0x06
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	69 f7       	brne	.-38     	; 0x20c6 <H_Lcd_Void_LCDWriteCharacter+0x410>
    20ec:	14 c0       	rjmp	.+40     	; 0x2116 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	8d 81       	ldd	r24, Y+5	; 0x05
    2104:	9e 81       	ldd	r25, Y+6	; 0x06
    2106:	9a 83       	std	Y+2, r25	; 0x02
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	9a 81       	ldd	r25, Y+2	; 0x02
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <H_Lcd_Void_LCDWriteCharacter+0x458>
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2116:	e9 96       	adiw	r28, 0x39	; 57
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	e9 97       	sbiw	r28, 0x39	; 57
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    213e:	8d e0       	ldi	r24, 0x0D	; 13
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    2146:	89 ad       	ldd	r24, Y+57	; 0x39
    2148:	82 95       	swap	r24
    214a:	8f 70       	andi	r24, 0x0F	; 15
    214c:	98 2f       	mov	r25, r24
    214e:	91 70       	andi	r25, 0x01	; 1
    2150:	84 e1       	ldi	r24, 0x14	; 20
    2152:	69 2f       	mov	r22, r25
    2154:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    2158:	89 ad       	ldd	r24, Y+57	; 0x39
    215a:	82 95       	swap	r24
    215c:	86 95       	lsr	r24
    215e:	87 70       	andi	r24, 0x07	; 7
    2160:	98 2f       	mov	r25, r24
    2162:	91 70       	andi	r25, 0x01	; 1
    2164:	85 e1       	ldi	r24, 0x15	; 21
    2166:	69 2f       	mov	r22, r25
    2168:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    216c:	89 ad       	ldd	r24, Y+57	; 0x39
    216e:	82 95       	swap	r24
    2170:	86 95       	lsr	r24
    2172:	86 95       	lsr	r24
    2174:	83 70       	andi	r24, 0x03	; 3
    2176:	98 2f       	mov	r25, r24
    2178:	91 70       	andi	r25, 0x01	; 1
    217a:	86 e1       	ldi	r24, 0x16	; 22
    217c:	69 2f       	mov	r22, r25
    217e:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    2182:	89 ad       	ldd	r24, Y+57	; 0x39
    2184:	98 2f       	mov	r25, r24
    2186:	99 1f       	adc	r25, r25
    2188:	99 27       	eor	r25, r25
    218a:	99 1f       	adc	r25, r25
    218c:	88 e1       	ldi	r24, 0x18	; 24
    218e:	69 2f       	mov	r22, r25
    2190:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2194:	8c e0       	ldi	r24, 0x0C	; 12
    2196:	61 e0       	ldi	r22, 0x01	; 1
    2198:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a0 e8       	ldi	r26, 0x80	; 128
    21a2:	bf e3       	ldi	r27, 0x3F	; 63
    21a4:	8d ab       	std	Y+53, r24	; 0x35
    21a6:	9e ab       	std	Y+54, r25	; 0x36
    21a8:	af ab       	std	Y+55, r26	; 0x37
    21aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	6d a9       	ldd	r22, Y+53	; 0x35
    21ae:	7e a9       	ldd	r23, Y+54	; 0x36
    21b0:	8f a9       	ldd	r24, Y+55	; 0x37
    21b2:	98 ad       	ldd	r25, Y+56	; 0x38
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	4a e7       	ldi	r20, 0x7A	; 122
    21ba:	55 e4       	ldi	r21, 0x45	; 69
    21bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	89 ab       	std	Y+49, r24	; 0x31
    21c6:	9a ab       	std	Y+50, r25	; 0x32
    21c8:	ab ab       	std	Y+51, r26	; 0x33
    21ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21cc:	69 a9       	ldd	r22, Y+49	; 0x31
    21ce:	7a a9       	ldd	r23, Y+50	; 0x32
    21d0:	8b a9       	ldd	r24, Y+51	; 0x33
    21d2:	9c a9       	ldd	r25, Y+52	; 0x34
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21e0:	88 23       	and	r24, r24
    21e2:	2c f4       	brge	.+10     	; 0x21ee <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	98 ab       	std	Y+48, r25	; 0x30
    21ea:	8f a7       	std	Y+47, r24	; 0x2f
    21ec:	3f c0       	rjmp	.+126    	; 0x226c <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    21ee:	69 a9       	ldd	r22, Y+49	; 0x31
    21f0:	7a a9       	ldd	r23, Y+50	; 0x32
    21f2:	8b a9       	ldd	r24, Y+51	; 0x33
    21f4:	9c a9       	ldd	r25, Y+52	; 0x34
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	57 e4       	ldi	r21, 0x47	; 71
    21fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	4c f5       	brge	.+82     	; 0x2258 <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2206:	6d a9       	ldd	r22, Y+53	; 0x35
    2208:	7e a9       	ldd	r23, Y+54	; 0x36
    220a:	8f a9       	ldd	r24, Y+55	; 0x37
    220c:	98 ad       	ldd	r25, Y+56	; 0x38
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	98 ab       	std	Y+48, r25	; 0x30
    222c:	8f a7       	std	Y+47, r24	; 0x2f
    222e:	0f c0       	rjmp	.+30     	; 0x224e <H_Lcd_Void_LCDWriteCommand+0x126>
    2230:	80 e9       	ldi	r24, 0x90	; 144
    2232:	91 e0       	ldi	r25, 0x01	; 1
    2234:	9e a7       	std	Y+46, r25	; 0x2e
    2236:	8d a7       	std	Y+45, r24	; 0x2d
    2238:	8d a5       	ldd	r24, Y+45	; 0x2d
    223a:	9e a5       	ldd	r25, Y+46	; 0x2e
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <H_Lcd_Void_LCDWriteCommand+0x114>
    2240:	9e a7       	std	Y+46, r25	; 0x2e
    2242:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2244:	8f a5       	ldd	r24, Y+47	; 0x2f
    2246:	98 a9       	ldd	r25, Y+48	; 0x30
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	98 ab       	std	Y+48, r25	; 0x30
    224c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2250:	98 a9       	ldd	r25, Y+48	; 0x30
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	69 f7       	brne	.-38     	; 0x2230 <H_Lcd_Void_LCDWriteCommand+0x108>
    2256:	14 c0       	rjmp	.+40     	; 0x2280 <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2258:	69 a9       	ldd	r22, Y+49	; 0x31
    225a:	7a a9       	ldd	r23, Y+50	; 0x32
    225c:	8b a9       	ldd	r24, Y+51	; 0x33
    225e:	9c a9       	ldd	r25, Y+52	; 0x34
    2260:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	8f a7       	std	Y+47, r24	; 0x2f
    226c:	8f a5       	ldd	r24, Y+47	; 0x2f
    226e:	98 a9       	ldd	r25, Y+48	; 0x30
    2270:	9c a7       	std	Y+44, r25	; 0x2c
    2272:	8b a7       	std	Y+43, r24	; 0x2b
    2274:	8b a5       	ldd	r24, Y+43	; 0x2b
    2276:	9c a5       	ldd	r25, Y+44	; 0x2c
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <H_Lcd_Void_LCDWriteCommand+0x150>
    227c:	9c a7       	std	Y+44, r25	; 0x2c
    227e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2280:	8c e0       	ldi	r24, 0x0C	; 12
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a0 e8       	ldi	r26, 0x80	; 128
    228e:	bf e3       	ldi	r27, 0x3F	; 63
    2290:	8f a3       	std	Y+39, r24	; 0x27
    2292:	98 a7       	std	Y+40, r25	; 0x28
    2294:	a9 a7       	std	Y+41, r26	; 0x29
    2296:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	6f a1       	ldd	r22, Y+39	; 0x27
    229a:	78 a5       	ldd	r23, Y+40	; 0x28
    229c:	89 a5       	ldd	r24, Y+41	; 0x29
    229e:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a e7       	ldi	r20, 0x7A	; 122
    22a6:	55 e4       	ldi	r21, 0x45	; 69
    22a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8b a3       	std	Y+35, r24	; 0x23
    22b2:	9c a3       	std	Y+36, r25	; 0x24
    22b4:	ad a3       	std	Y+37, r26	; 0x25
    22b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22b8:	6b a1       	ldd	r22, Y+35	; 0x23
    22ba:	7c a1       	ldd	r23, Y+36	; 0x24
    22bc:	8d a1       	ldd	r24, Y+37	; 0x25
    22be:	9e a1       	ldd	r25, Y+38	; 0x26
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9a a3       	std	Y+34, r25	; 0x22
    22d6:	89 a3       	std	Y+33, r24	; 0x21
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    22da:	6b a1       	ldd	r22, Y+35	; 0x23
    22dc:	7c a1       	ldd	r23, Y+36	; 0x24
    22de:	8d a1       	ldd	r24, Y+37	; 0x25
    22e0:	9e a1       	ldd	r25, Y+38	; 0x26
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	6f a1       	ldd	r22, Y+39	; 0x27
    22f4:	78 a5       	ldd	r23, Y+40	; 0x28
    22f6:	89 a5       	ldd	r24, Y+41	; 0x29
    22f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9a a3       	std	Y+34, r25	; 0x22
    2318:	89 a3       	std	Y+33, r24	; 0x21
    231a:	0f c0       	rjmp	.+30     	; 0x233a <H_Lcd_Void_LCDWriteCommand+0x212>
    231c:	80 e9       	ldi	r24, 0x90	; 144
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	98 a3       	std	Y+32, r25	; 0x20
    2322:	8f 8f       	std	Y+31, r24	; 0x1f
    2324:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2326:	98 a1       	ldd	r25, Y+32	; 0x20
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <H_Lcd_Void_LCDWriteCommand+0x200>
    232c:	98 a3       	std	Y+32, r25	; 0x20
    232e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	89 a1       	ldd	r24, Y+33	; 0x21
    2332:	9a a1       	ldd	r25, Y+34	; 0x22
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9a a3       	std	Y+34, r25	; 0x22
    2338:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	89 a1       	ldd	r24, Y+33	; 0x21
    233c:	9a a1       	ldd	r25, Y+34	; 0x22
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <H_Lcd_Void_LCDWriteCommand+0x1f4>
    2342:	14 c0       	rjmp	.+40     	; 0x236c <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	6b a1       	ldd	r22, Y+35	; 0x23
    2346:	7c a1       	ldd	r23, Y+36	; 0x24
    2348:	8d a1       	ldd	r24, Y+37	; 0x25
    234a:	9e a1       	ldd	r25, Y+38	; 0x26
    234c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9a a3       	std	Y+34, r25	; 0x22
    2356:	89 a3       	std	Y+33, r24	; 0x21
    2358:	89 a1       	ldd	r24, Y+33	; 0x21
    235a:	9a a1       	ldd	r25, Y+34	; 0x22
    235c:	9e 8f       	std	Y+30, r25	; 0x1e
    235e:	8d 8f       	std	Y+29, r24	; 0x1d
    2360:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2362:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <H_Lcd_Void_LCDWriteCommand+0x23c>
    2368:	9e 8f       	std	Y+30, r25	; 0x1e
    236a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    236c:	89 ad       	ldd	r24, Y+57	; 0x39
    236e:	98 2f       	mov	r25, r24
    2370:	91 70       	andi	r25, 0x01	; 1
    2372:	84 e1       	ldi	r24, 0x14	; 20
    2374:	69 2f       	mov	r22, r25
    2376:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    237a:	89 ad       	ldd	r24, Y+57	; 0x39
    237c:	86 95       	lsr	r24
    237e:	98 2f       	mov	r25, r24
    2380:	91 70       	andi	r25, 0x01	; 1
    2382:	85 e1       	ldi	r24, 0x15	; 21
    2384:	69 2f       	mov	r22, r25
    2386:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    238a:	89 ad       	ldd	r24, Y+57	; 0x39
    238c:	86 95       	lsr	r24
    238e:	86 95       	lsr	r24
    2390:	98 2f       	mov	r25, r24
    2392:	91 70       	andi	r25, 0x01	; 1
    2394:	86 e1       	ldi	r24, 0x16	; 22
    2396:	69 2f       	mov	r22, r25
    2398:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    239c:	89 ad       	ldd	r24, Y+57	; 0x39
    239e:	86 95       	lsr	r24
    23a0:	86 95       	lsr	r24
    23a2:	86 95       	lsr	r24
    23a4:	98 2f       	mov	r25, r24
    23a6:	91 70       	andi	r25, 0x01	; 1
    23a8:	88 e1       	ldi	r24, 0x18	; 24
    23aa:	69 2f       	mov	r22, r25
    23ac:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    23b0:	8c e0       	ldi	r24, 0x0C	; 12
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a0 e8       	ldi	r26, 0x80	; 128
    23be:	bf e3       	ldi	r27, 0x3F	; 63
    23c0:	89 8f       	std	Y+25, r24	; 0x19
    23c2:	9a 8f       	std	Y+26, r25	; 0x1a
    23c4:	ab 8f       	std	Y+27, r26	; 0x1b
    23c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	69 8d       	ldd	r22, Y+25	; 0x19
    23ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a e7       	ldi	r20, 0x7A	; 122
    23d6:	55 e4       	ldi	r21, 0x45	; 69
    23d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	8d 8b       	std	Y+21, r24	; 0x15
    23e2:	9e 8b       	std	Y+22, r25	; 0x16
    23e4:	af 8b       	std	Y+23, r26	; 0x17
    23e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23e8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ea:	7e 89       	ldd	r23, Y+22	; 0x16
    23ec:	8f 89       	ldd	r24, Y+23	; 0x17
    23ee:	98 8d       	ldd	r25, Y+24	; 0x18
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9c 8b       	std	Y+20, r25	; 0x14
    2406:	8b 8b       	std	Y+19, r24	; 0x13
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    240a:	6d 89       	ldd	r22, Y+21	; 0x15
    240c:	7e 89       	ldd	r23, Y+22	; 0x16
    240e:	8f 89       	ldd	r24, Y+23	; 0x17
    2410:	98 8d       	ldd	r25, Y+24	; 0x18
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	69 8d       	ldd	r22, Y+25	; 0x19
    2424:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9c 8b       	std	Y+20, r25	; 0x14
    2448:	8b 8b       	std	Y+19, r24	; 0x13
    244a:	0f c0       	rjmp	.+30     	; 0x246a <H_Lcd_Void_LCDWriteCommand+0x342>
    244c:	80 e9       	ldi	r24, 0x90	; 144
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	9a 8b       	std	Y+18, r25	; 0x12
    2452:	89 8b       	std	Y+17, r24	; 0x11
    2454:	89 89       	ldd	r24, Y+17	; 0x11
    2456:	9a 89       	ldd	r25, Y+18	; 0x12
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <H_Lcd_Void_LCDWriteCommand+0x330>
    245c:	9a 8b       	std	Y+18, r25	; 0x12
    245e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	8b 89       	ldd	r24, Y+19	; 0x13
    2462:	9c 89       	ldd	r25, Y+20	; 0x14
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	8b 89       	ldd	r24, Y+19	; 0x13
    246c:	9c 89       	ldd	r25, Y+20	; 0x14
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <H_Lcd_Void_LCDWriteCommand+0x324>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	6d 89       	ldd	r22, Y+21	; 0x15
    2476:	7e 89       	ldd	r23, Y+22	; 0x16
    2478:	8f 89       	ldd	r24, Y+23	; 0x17
    247a:	98 8d       	ldd	r25, Y+24	; 0x18
    247c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9c 8b       	std	Y+20, r25	; 0x14
    2486:	8b 8b       	std	Y+19, r24	; 0x13
    2488:	8b 89       	ldd	r24, Y+19	; 0x13
    248a:	9c 89       	ldd	r25, Y+20	; 0x14
    248c:	98 8b       	std	Y+16, r25	; 0x10
    248e:	8f 87       	std	Y+15, r24	; 0x0f
    2490:	8f 85       	ldd	r24, Y+15	; 0x0f
    2492:	98 89       	ldd	r25, Y+16	; 0x10
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <H_Lcd_Void_LCDWriteCommand+0x36c>
    2498:	98 8b       	std	Y+16, r25	; 0x10
    249a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    249c:	8c e0       	ldi	r24, 0x0C	; 12
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	0e 94 29 09 	call	0x1252	; 0x1252 <M_DIO_Void_SetPinValue>
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a0 ea       	ldi	r26, 0xA0	; 160
    24aa:	b0 e4       	ldi	r27, 0x40	; 64
    24ac:	8b 87       	std	Y+11, r24	; 0x0b
    24ae:	9c 87       	std	Y+12, r25	; 0x0c
    24b0:	ad 87       	std	Y+13, r26	; 0x0d
    24b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4a e7       	ldi	r20, 0x7A	; 122
    24c2:	55 e4       	ldi	r21, 0x45	; 69
    24c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	8f 83       	std	Y+7, r24	; 0x07
    24ce:	98 87       	std	Y+8, r25	; 0x08
    24d0:	a9 87       	std	Y+9, r26	; 0x09
    24d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d4:	6f 81       	ldd	r22, Y+7	; 0x07
    24d6:	78 85       	ldd	r23, Y+8	; 0x08
    24d8:	89 85       	ldd	r24, Y+9	; 0x09
    24da:	9a 85       	ldd	r25, Y+10	; 0x0a
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24e8:	88 23       	and	r24, r24
    24ea:	2c f4       	brge	.+10     	; 0x24f6 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9e 83       	std	Y+6, r25	; 0x06
    24f2:	8d 83       	std	Y+5, r24	; 0x05
    24f4:	3f c0       	rjmp	.+126    	; 0x2574 <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    24f6:	6f 81       	ldd	r22, Y+7	; 0x07
    24f8:	78 85       	ldd	r23, Y+8	; 0x08
    24fa:	89 85       	ldd	r24, Y+9	; 0x09
    24fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	4c f5       	brge	.+82     	; 0x2560 <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2510:	7c 85       	ldd	r23, Y+12	; 0x0c
    2512:	8d 85       	ldd	r24, Y+13	; 0x0d
    2514:	9e 85       	ldd	r25, Y+14	; 0x0e
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	9e 83       	std	Y+6, r25	; 0x06
    2534:	8d 83       	std	Y+5, r24	; 0x05
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <H_Lcd_Void_LCDWriteCommand+0x42e>
    2538:	80 e9       	ldi	r24, 0x90	; 144
    253a:	91 e0       	ldi	r25, 0x01	; 1
    253c:	9c 83       	std	Y+4, r25	; 0x04
    253e:	8b 83       	std	Y+3, r24	; 0x03
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	9c 81       	ldd	r25, Y+4	; 0x04
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <H_Lcd_Void_LCDWriteCommand+0x41c>
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	9e 81       	ldd	r25, Y+6	; 0x06
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	69 f7       	brne	.-38     	; 0x2538 <H_Lcd_Void_LCDWriteCommand+0x410>
    255e:	14 c0       	rjmp	.+40     	; 0x2588 <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2560:	6f 81       	ldd	r22, Y+7	; 0x07
    2562:	78 85       	ldd	r23, Y+8	; 0x08
    2564:	89 85       	ldd	r24, Y+9	; 0x09
    2566:	9a 85       	ldd	r25, Y+10	; 0x0a
    2568:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9e 83       	std	Y+6, r25	; 0x06
    2572:	8d 83       	std	Y+5, r24	; 0x05
    2574:	8d 81       	ldd	r24, Y+5	; 0x05
    2576:	9e 81       	ldd	r25, Y+6	; 0x06
    2578:	9a 83       	std	Y+2, r25	; 0x02
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	9a 81       	ldd	r25, Y+2	; 0x02
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <H_Lcd_Void_LCDWriteCommand+0x458>
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2588:	e9 96       	adiw	r28, 0x39	; 57
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <H_Lcd_Void_LCDWriteString+0x6>
    25a0:	0f 92       	push	r0
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	9b 83       	std	Y+3, r25	; 0x03
    25a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    25aa:	19 82       	std	Y+1, r1	; 0x01
    25ac:	0e c0       	rjmp	.+28     	; 0x25ca <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	9b 81       	ldd	r25, Y+3	; 0x03
    25b8:	fc 01       	movw	r30, r24
    25ba:	e2 0f       	add	r30, r18
    25bc:	f3 1f       	adc	r31, r19
    25be:	80 81       	ld	r24, Z
    25c0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	9b 81       	ldd	r25, Y+3	; 0x03
    25d4:	fc 01       	movw	r30, r24
    25d6:	e2 0f       	add	r30, r18
    25d8:	f3 1f       	adc	r31, r19
    25da:	80 81       	ld	r24, Z
    25dc:	88 23       	and	r24, r24
    25de:	39 f7       	brne	.-50     	; 0x25ae <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	0e 94 94 10 	call	0x2128	; 0x2128 <H_Lcd_Void_LCDWriteCommand>
}
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	2f 97       	sbiw	r28, 0x0f	; 15
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	6c 87       	std	Y+12, r22	; 0x0c
    261a:	7d 87       	std	Y+13, r23	; 0x0d
    261c:	8e 87       	std	Y+14, r24	; 0x0e
    261e:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    2620:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    2622:	8a e0       	ldi	r24, 0x0A	; 10
    2624:	fe 01       	movw	r30, r28
    2626:	32 96       	adiw	r30, 0x02	; 2
    2628:	df 01       	movw	r26, r30
    262a:	98 2f       	mov	r25, r24
    262c:	1d 92       	st	X+, r1
    262e:	9a 95       	dec	r25
    2630:	e9 f7       	brne	.-6      	; 0x262c <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    2632:	8c 85       	ldd	r24, Y+12	; 0x0c
    2634:	9d 85       	ldd	r25, Y+13	; 0x0d
    2636:	ae 85       	ldd	r26, Y+14	; 0x0e
    2638:	bf 85       	ldd	r27, Y+15	; 0x0f
    263a:	bb 23       	and	r27, r27
    263c:	94 f4       	brge	.+36     	; 0x2662 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    263e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2640:	9d 85       	ldd	r25, Y+13	; 0x0d
    2642:	ae 85       	ldd	r26, Y+14	; 0x0e
    2644:	bf 85       	ldd	r27, Y+15	; 0x0f
    2646:	b0 95       	com	r27
    2648:	a0 95       	com	r26
    264a:	90 95       	com	r25
    264c:	81 95       	neg	r24
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	af 4f       	sbci	r26, 0xFF	; 255
    2652:	bf 4f       	sbci	r27, 0xFF	; 255
    2654:	8c 87       	std	Y+12, r24	; 0x0c
    2656:	9d 87       	std	Y+13, r25	; 0x0d
    2658:	ae 87       	std	Y+14, r26	; 0x0e
    265a:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    265c:	8d e2       	ldi	r24, 0x2D	; 45
    265e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	08 2f       	mov	r16, r24
    2666:	11 27       	eor	r17, r17
    2668:	07 fd       	sbrc	r16, 7
    266a:	10 95       	com	r17
    266c:	8c 85       	ldd	r24, Y+12	; 0x0c
    266e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2670:	ae 85       	ldd	r26, Y+14	; 0x0e
    2672:	bf 85       	ldd	r27, Y+15	; 0x0f
    2674:	2a e0       	ldi	r18, 0x0A	; 10
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	50 e0       	ldi	r21, 0x00	; 0
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 bb 13 	call	0x2776	; 0x2776 <__divmodsi4>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	28 2f       	mov	r18, r24
    268a:	ce 01       	movw	r24, r28
    268c:	02 96       	adiw	r24, 0x02	; 2
    268e:	fc 01       	movw	r30, r24
    2690:	e0 0f       	add	r30, r16
    2692:	f1 1f       	adc	r31, r17
    2694:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    2696:	8c 85       	ldd	r24, Y+12	; 0x0c
    2698:	9d 85       	ldd	r25, Y+13	; 0x0d
    269a:	ae 85       	ldd	r26, Y+14	; 0x0e
    269c:	bf 85       	ldd	r27, Y+15	; 0x0f
    269e:	2a e0       	ldi	r18, 0x0A	; 10
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 bb 13 	call	0x2776	; 0x2776 <__divmodsi4>
    26ae:	da 01       	movw	r26, r20
    26b0:	c9 01       	movw	r24, r18
    26b2:	8c 87       	std	Y+12, r24	; 0x0c
    26b4:	9d 87       	std	Y+13, r25	; 0x0d
    26b6:	ae 87       	std	Y+14, r26	; 0x0e
    26b8:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	8f 5f       	subi	r24, 0xFF	; 255
    26be:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    26c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    26c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    26c4:	ae 85       	ldd	r26, Y+14	; 0x0e
    26c6:	bf 85       	ldd	r27, Y+15	; 0x0f
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	a1 05       	cpc	r26, r1
    26cc:	b1 05       	cpc	r27, r1
    26ce:	49 f6       	brne	.-110    	; 0x2662 <H_Lcd_Void_LCDWriteNumber+0x62>
    26d0:	11 c0       	rjmp	.+34     	; 0x26f4 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	81 50       	subi	r24, 0x01	; 1
    26d6:	89 83       	std	Y+1, r24	; 0x01
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	28 2f       	mov	r18, r24
    26dc:	33 27       	eor	r19, r19
    26de:	27 fd       	sbrc	r18, 7
    26e0:	30 95       	com	r19
    26e2:	ce 01       	movw	r24, r28
    26e4:	02 96       	adiw	r24, 0x02	; 2
    26e6:	fc 01       	movw	r30, r24
    26e8:	e2 0f       	add	r30, r18
    26ea:	f3 1f       	adc	r31, r19
    26ec:	80 81       	ld	r24, Z
    26ee:	80 5d       	subi	r24, 0xD0	; 208
    26f0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	18 16       	cp	r1, r24
    26f8:	64 f3       	brlt	.-40     	; 0x26d2 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    26fa:	2f 96       	adiw	r28, 0x0f	; 15
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	08 95       	ret

00002710 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	00 d0       	rcall	.+0      	; 0x2716 <H_Lcd_Void_LCDGoTo+0x6>
    2716:	00 d0       	rcall	.+0      	; 0x2718 <H_Lcd_Void_LCDGoTo+0x8>
    2718:	00 d0       	rcall	.+0      	; 0x271a <H_Lcd_Void_LCDGoTo+0xa>
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	8d 83       	std	Y+5, r24	; 0x05
    2720:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    2722:	80 e8       	ldi	r24, 0x80	; 128
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	80 ec       	ldi	r24, 0xC0	; 192
    2728:	8a 83       	std	Y+2, r24	; 0x02
    272a:	84 e9       	ldi	r24, 0x94	; 148
    272c:	8b 83       	std	Y+3, r24	; 0x03
    272e:	84 ed       	ldi	r24, 0xD4	; 212
    2730:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    2732:	8d 81       	ldd	r24, Y+5	; 0x05
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	ce 01       	movw	r24, r28
    273a:	01 96       	adiw	r24, 0x01	; 1
    273c:	fc 01       	movw	r30, r24
    273e:	e2 0f       	add	r30, r18
    2740:	f3 1f       	adc	r31, r19
    2742:	90 81       	ld	r25, Z
    2744:	8e 81       	ldd	r24, Y+6	; 0x06
    2746:	89 0f       	add	r24, r25
    2748:	0e 94 94 10 	call	0x2128	; 0x2128 <H_Lcd_Void_LCDWriteCommand>
}
    274c:	26 96       	adiw	r28, 0x06	; 6
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <__udivmodqi4>:
    275e:	99 1b       	sub	r25, r25
    2760:	79 e0       	ldi	r23, 0x09	; 9
    2762:	04 c0       	rjmp	.+8      	; 0x276c <__udivmodqi4_ep>

00002764 <__udivmodqi4_loop>:
    2764:	99 1f       	adc	r25, r25
    2766:	96 17       	cp	r25, r22
    2768:	08 f0       	brcs	.+2      	; 0x276c <__udivmodqi4_ep>
    276a:	96 1b       	sub	r25, r22

0000276c <__udivmodqi4_ep>:
    276c:	88 1f       	adc	r24, r24
    276e:	7a 95       	dec	r23
    2770:	c9 f7       	brne	.-14     	; 0x2764 <__udivmodqi4_loop>
    2772:	80 95       	com	r24
    2774:	08 95       	ret

00002776 <__divmodsi4>:
    2776:	97 fb       	bst	r25, 7
    2778:	09 2e       	mov	r0, r25
    277a:	05 26       	eor	r0, r21
    277c:	0e d0       	rcall	.+28     	; 0x279a <__divmodsi4_neg1>
    277e:	57 fd       	sbrc	r21, 7
    2780:	04 d0       	rcall	.+8      	; 0x278a <__divmodsi4_neg2>
    2782:	14 d0       	rcall	.+40     	; 0x27ac <__udivmodsi4>
    2784:	0a d0       	rcall	.+20     	; 0x279a <__divmodsi4_neg1>
    2786:	00 1c       	adc	r0, r0
    2788:	38 f4       	brcc	.+14     	; 0x2798 <__divmodsi4_exit>

0000278a <__divmodsi4_neg2>:
    278a:	50 95       	com	r21
    278c:	40 95       	com	r20
    278e:	30 95       	com	r19
    2790:	21 95       	neg	r18
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	4f 4f       	sbci	r20, 0xFF	; 255
    2796:	5f 4f       	sbci	r21, 0xFF	; 255

00002798 <__divmodsi4_exit>:
    2798:	08 95       	ret

0000279a <__divmodsi4_neg1>:
    279a:	f6 f7       	brtc	.-4      	; 0x2798 <__divmodsi4_exit>
    279c:	90 95       	com	r25
    279e:	80 95       	com	r24
    27a0:	70 95       	com	r23
    27a2:	61 95       	neg	r22
    27a4:	7f 4f       	sbci	r23, 0xFF	; 255
    27a6:	8f 4f       	sbci	r24, 0xFF	; 255
    27a8:	9f 4f       	sbci	r25, 0xFF	; 255
    27aa:	08 95       	ret

000027ac <__udivmodsi4>:
    27ac:	a1 e2       	ldi	r26, 0x21	; 33
    27ae:	1a 2e       	mov	r1, r26
    27b0:	aa 1b       	sub	r26, r26
    27b2:	bb 1b       	sub	r27, r27
    27b4:	fd 01       	movw	r30, r26
    27b6:	0d c0       	rjmp	.+26     	; 0x27d2 <__udivmodsi4_ep>

000027b8 <__udivmodsi4_loop>:
    27b8:	aa 1f       	adc	r26, r26
    27ba:	bb 1f       	adc	r27, r27
    27bc:	ee 1f       	adc	r30, r30
    27be:	ff 1f       	adc	r31, r31
    27c0:	a2 17       	cp	r26, r18
    27c2:	b3 07       	cpc	r27, r19
    27c4:	e4 07       	cpc	r30, r20
    27c6:	f5 07       	cpc	r31, r21
    27c8:	20 f0       	brcs	.+8      	; 0x27d2 <__udivmodsi4_ep>
    27ca:	a2 1b       	sub	r26, r18
    27cc:	b3 0b       	sbc	r27, r19
    27ce:	e4 0b       	sbc	r30, r20
    27d0:	f5 0b       	sbc	r31, r21

000027d2 <__udivmodsi4_ep>:
    27d2:	66 1f       	adc	r22, r22
    27d4:	77 1f       	adc	r23, r23
    27d6:	88 1f       	adc	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	1a 94       	dec	r1
    27dc:	69 f7       	brne	.-38     	; 0x27b8 <__udivmodsi4_loop>
    27de:	60 95       	com	r22
    27e0:	70 95       	com	r23
    27e2:	80 95       	com	r24
    27e4:	90 95       	com	r25
    27e6:	9b 01       	movw	r18, r22
    27e8:	ac 01       	movw	r20, r24
    27ea:	bd 01       	movw	r22, r26
    27ec:	cf 01       	movw	r24, r30
    27ee:	08 95       	ret

000027f0 <__prologue_saves__>:
    27f0:	2f 92       	push	r2
    27f2:	3f 92       	push	r3
    27f4:	4f 92       	push	r4
    27f6:	5f 92       	push	r5
    27f8:	6f 92       	push	r6
    27fa:	7f 92       	push	r7
    27fc:	8f 92       	push	r8
    27fe:	9f 92       	push	r9
    2800:	af 92       	push	r10
    2802:	bf 92       	push	r11
    2804:	cf 92       	push	r12
    2806:	df 92       	push	r13
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	ca 1b       	sub	r28, r26
    281a:	db 0b       	sbc	r29, r27
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	09 94       	ijmp

00002828 <__epilogue_restores__>:
    2828:	2a 88       	ldd	r2, Y+18	; 0x12
    282a:	39 88       	ldd	r3, Y+17	; 0x11
    282c:	48 88       	ldd	r4, Y+16	; 0x10
    282e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2830:	6e 84       	ldd	r6, Y+14	; 0x0e
    2832:	7d 84       	ldd	r7, Y+13	; 0x0d
    2834:	8c 84       	ldd	r8, Y+12	; 0x0c
    2836:	9b 84       	ldd	r9, Y+11	; 0x0b
    2838:	aa 84       	ldd	r10, Y+10	; 0x0a
    283a:	b9 84       	ldd	r11, Y+9	; 0x09
    283c:	c8 84       	ldd	r12, Y+8	; 0x08
    283e:	df 80       	ldd	r13, Y+7	; 0x07
    2840:	ee 80       	ldd	r14, Y+6	; 0x06
    2842:	fd 80       	ldd	r15, Y+5	; 0x05
    2844:	0c 81       	ldd	r16, Y+4	; 0x04
    2846:	1b 81       	ldd	r17, Y+3	; 0x03
    2848:	aa 81       	ldd	r26, Y+2	; 0x02
    284a:	b9 81       	ldd	r27, Y+1	; 0x01
    284c:	ce 0f       	add	r28, r30
    284e:	d1 1d       	adc	r29, r1
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	ed 01       	movw	r28, r26
    285c:	08 95       	ret

0000285e <_exit>:
    285e:	f8 94       	cli

00002860 <__stop_program>:
    2860:	ff cf       	rjmp	.-2      	; 0x2860 <__stop_program>
