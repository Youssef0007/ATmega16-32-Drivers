/******************************************************************************
 *
 * Module: UART
 *
 * File Name: UART.c
 *
 * Description: Source file for the UART AVR driver
 *
 * Author: Youssef Abdelaziz
 *
 *******************************************************************************/

#include "UART_Interface.h"
#include "DIO/DIO_Interface.h"
#include "avr\interrupt.h"
/*******************************************************************************
 *                        Global Variables                                      *
 *******************************************************************************/

/*a global ptr to function that takes char and return void*/
void (*UART_RXC_CallBack)(u8) = NULL_PTR;

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*
 * Description :
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits
 * 	  parity bit type and number of stop bits.
 * 2. Enable the UART RX and TX pins.
 * 3. Setup the UART baud rate.
 */
void UART_Init(void)
{
	/*temporary variables to assign the configuration to registers at once*/
	u8  UCSRB_Temp = 0;
	u8  UCSRC_Temp = 0;
	u16 UBRR_Value = 0;/*for baud rate equation*/

	/*configure the TX and RX pins as UART pins*/
	SET_BIT(UCSRB_Temp,RXEN);
	SET_BIT(UCSRB_Temp,TXEN);

	/*set the UBBR according to the Baud-rate selected by user*/
	#if DOUBLE_SPEED == DOUBLE_SPEED_TRUE
		SET_BIT(UCSRA,U2X);
		UBRR_Value= (u16)(((F_CPU) / ((u32)8 *BAUDRATE))-1);/*baud-rate equation from table*/
	#elif DOUBLE_SPEED == DOUBLE_SPEED_FALSE
		UBRR_Value= (u16)(((F_CPU) /((u32)16 *BAUDRATE))-1);/*baud-rate equation from table*/
	#endif

	UBRRH = (UBRR_Value >>8);
	UBRRL = UBRR_Value;

	/*enable the receiver interrupt */
	#if RECEIVE_METHOD == INTERRUPT_MODE
		SET_BIT(UCSRB_Temp,RXCIE);
		CLR_BIT(UCSRB_Temp,TXCIE);
	#else
		CLR_BIT(UCSRB_Temp,RXCIE);
		CLR_BIT(UCSRB_Temp,TXCIE);
	#endif

	/*set the frame as the user require in the configuration file
	 * either 8_bit or 9_bits data mode */
	#if	FRAME_BITS == _9_BITS_DATA_MODE
		/*enable the 9th bits for data mode 9 bits*/
		SET_BIT(UCSRB_Temp,RXB8);
		SET_BIT(UCSRB_Temp,TXB8);
		/*activate the 9bit mode data frame*/
		SET_BIT(UCSRC_Temp,UCSZ0);
		SET_BIT(UCSRC_Temp,UCSZ1);
		SET_BIT(UCSRB_Temp,UCSZ2);

	#elif FRAME_BITS == _8_BITS_DATA_MODE
		SET_BIT(UCSRC_Temp,UCSZ0);
		SET_BIT(UCSRC_Temp,UCSZ1);
		CLR_BIT(UCSRB_Temp,UCSZ2);
	#endif

	/*configure the number of stop bits as the user chose*/
	#if	STOP_BIT == STOP_BIT_SINGLE
		CLR_BIT(UCSRC_Temp,USBS);

	#elif	STOP_BIT == STOP_BIT_DOUBLE
		SET_BIT(UCSRC_Temp,USBS);
	#endif

	/*parity check bits off or on and odd or even parity*/
	#if PARITY_CHECK == PARITY_CHECK_OFF
		CLR_BIT(UCSRC_Temp,UPM0);
		CLR_BIT(UCSRC_Temp,UPM1);

	#elif	PARITY_CHECK == PARITY_CHECK_EVEN
		SET_BIT(UCSRC_Temp,UPM1);

	#elif	PARITY_CHECK == PARITY_CHECK_ODD
		SET_BIT(UCSRC_Temp,UPM0);
		SET_BIT(UCSRC_Temp,UPM1);
	#endif

	/*assign the required UART configuration in the UART*
	 *Control and Status UCSRB and UCSRC registers		*/
	UCSRB = UCSRB_Temp;
	/*select asynchronous mode*/
	CLR_BIT(UCSRC_Temp,UMSEL);
	/*select UCSRC register to write configuration to it  */
	SET_BIT(UCSRC,URSEL);
	UCSRC |= UCSRC_Temp;
	
}

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(u8 Data_byte){
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (!GET_BIT(UCSRA, UDRE));
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = Data_byte;
}

void UART_sendString(const u8* Str_To_Send){
	/*send string char by char until you reach null char*/
	while(*Str_To_Send != '\0')
	{
		UART_sendByte(*Str_To_Send);
		Str_To_Send++;
	}
	/*send the null character to indicate the receiver that the string has ended*/
	UART_sendByte(*Str_To_Send);
}

void UART_receiveString(u8* Str_Received){
	while (*Str_Received != '\0')
	{
		*Str_Received = UART_receiveByteSynch();
		Str_Received++;
	}
	*Str_Received = '\0';/*assign the null character to the end of the string*/
}


u8 UART_receiveByteSynch(void){
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(!GET_BIT(UCSRA,RXC));
		/*
		 * Read the received data from the Rx buffer (UDR)
		 * The RXC flag will be cleared after read the data
		 */
	return UDR;
}

void UART_receiveByteAsynchCallBack(void(*Copy_Ptr)(u8)){
	UART_RXC_CallBack = Copy_Ptr;
}

ISR(USART_RXC_vect)
{
	if (UART_RXC_CallBack != NULL_PTR)
		{
			UART_RXC_CallBack(UDR);
		}

}
