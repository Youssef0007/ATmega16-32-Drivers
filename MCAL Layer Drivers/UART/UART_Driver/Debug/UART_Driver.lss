
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002232  000022c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  000022ce  2**0
                  ALLOC
  3 .stab         00001a94  00000000  00000000  000022d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d0e  00000000  00000000  00003d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000696b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007856  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008604  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000089f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000091bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e3       	ldi	r30, 0x32	; 50
      78:	f2 e2       	ldi	r31, 0x22	; 34
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 82 10 	call	0x2104	; 0x2104 <main>
      8a:	0c 94 17 11 	jmp	0x222e	; 0x222e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <H_Lcd_Void_LCDInit>:
#include <util/delay.h>
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
     b4e:	84 e1       	ldi	r24, 0x14	; 20
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	0e 94 28 0b 	call	0x1650	; 0x1650 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
     b56:	85 e1       	ldi	r24, 0x15	; 21
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	0e 94 28 0b 	call	0x1650	; 0x1650 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
     b5e:	86 e1       	ldi	r24, 0x16	; 22
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	0e 94 28 0b 	call	0x1650	; 0x1650 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	0e 94 28 0b 	call	0x1650	; 0x1650 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
     b6e:	8d e0       	ldi	r24, 0x0D	; 13
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	0e 94 28 0b 	call	0x1650	; 0x1650 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
     b76:	8c e0       	ldi	r24, 0x0C	; 12
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	0e 94 28 0b 	call	0x1650	; 0x1650 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
     b7e:	83 e3       	ldi	r24, 0x33	; 51
     b80:	0e 94 0d 08 	call	0x101a	; 0x101a <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
     b84:	82 e3       	ldi	r24, 0x32	; 50
     b86:	0e 94 0d 08 	call	0x101a	; 0x101a <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
     b8a:	88 e2       	ldi	r24, 0x28	; 40
     b8c:	0e 94 0d 08 	call	0x101a	; 0x101a <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
     b90:	8c e0       	ldi	r24, 0x0C	; 12
     b92:	0e 94 0d 08 	call	0x101a	; 0x101a <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	0e 94 0d 08 	call	0x101a	; 0x101a <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	0e 94 0d 08 	call	0x101a	; 0x101a <H_Lcd_Void_LCDWriteCommand>


#endif
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	e9 97       	sbiw	r28, 0x39	; 57
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
     bbe:	8d e0       	ldi	r24, 0x0D	; 13
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
     bc6:	89 ad       	ldd	r24, Y+57	; 0x39
     bc8:	82 95       	swap	r24
     bca:	8f 70       	andi	r24, 0x0F	; 15
     bcc:	98 2f       	mov	r25, r24
     bce:	91 70       	andi	r25, 0x01	; 1
     bd0:	84 e1       	ldi	r24, 0x14	; 20
     bd2:	69 2f       	mov	r22, r25
     bd4:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
     bd8:	89 ad       	ldd	r24, Y+57	; 0x39
     bda:	82 95       	swap	r24
     bdc:	86 95       	lsr	r24
     bde:	87 70       	andi	r24, 0x07	; 7
     be0:	98 2f       	mov	r25, r24
     be2:	91 70       	andi	r25, 0x01	; 1
     be4:	85 e1       	ldi	r24, 0x15	; 21
     be6:	69 2f       	mov	r22, r25
     be8:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
     bec:	89 ad       	ldd	r24, Y+57	; 0x39
     bee:	82 95       	swap	r24
     bf0:	86 95       	lsr	r24
     bf2:	86 95       	lsr	r24
     bf4:	83 70       	andi	r24, 0x03	; 3
     bf6:	98 2f       	mov	r25, r24
     bf8:	91 70       	andi	r25, 0x01	; 1
     bfa:	86 e1       	ldi	r24, 0x16	; 22
     bfc:	69 2f       	mov	r22, r25
     bfe:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
     c02:	89 ad       	ldd	r24, Y+57	; 0x39
     c04:	98 2f       	mov	r25, r24
     c06:	99 1f       	adc	r25, r25
     c08:	99 27       	eor	r25, r25
     c0a:	99 1f       	adc	r25, r25
     c0c:	88 e1       	ldi	r24, 0x18	; 24
     c0e:	69 2f       	mov	r22, r25
     c10:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     c14:	8c e0       	ldi	r24, 0x0C	; 12
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e8       	ldi	r26, 0x80	; 128
     c22:	bf e3       	ldi	r27, 0x3F	; 63
     c24:	8d ab       	std	Y+53, r24	; 0x35
     c26:	9e ab       	std	Y+54, r25	; 0x36
     c28:	af ab       	std	Y+55, r26	; 0x37
     c2a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c2c:	6d a9       	ldd	r22, Y+53	; 0x35
     c2e:	7e a9       	ldd	r23, Y+54	; 0x36
     c30:	8f a9       	ldd	r24, Y+55	; 0x37
     c32:	98 ad       	ldd	r25, Y+56	; 0x38
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	4a ef       	ldi	r20, 0xFA	; 250
     c3a:	54 e4       	ldi	r21, 0x44	; 68
     c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	89 ab       	std	Y+49, r24	; 0x31
     c46:	9a ab       	std	Y+50, r25	; 0x32
     c48:	ab ab       	std	Y+51, r26	; 0x33
     c4a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c4c:	69 a9       	ldd	r22, Y+49	; 0x31
     c4e:	7a a9       	ldd	r23, Y+50	; 0x32
     c50:	8b a9       	ldd	r24, Y+51	; 0x33
     c52:	9c a9       	ldd	r25, Y+52	; 0x34
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e8       	ldi	r20, 0x80	; 128
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c60:	88 23       	and	r24, r24
     c62:	2c f4       	brge	.+10     	; 0xc6e <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	98 ab       	std	Y+48, r25	; 0x30
     c6a:	8f a7       	std	Y+47, r24	; 0x2f
     c6c:	3f c0       	rjmp	.+126    	; 0xcec <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
     c6e:	69 a9       	ldd	r22, Y+49	; 0x31
     c70:	7a a9       	ldd	r23, Y+50	; 0x32
     c72:	8b a9       	ldd	r24, Y+51	; 0x33
     c74:	9c a9       	ldd	r25, Y+52	; 0x34
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	3f ef       	ldi	r19, 0xFF	; 255
     c7a:	4f e7       	ldi	r20, 0x7F	; 127
     c7c:	57 e4       	ldi	r21, 0x47	; 71
     c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c82:	18 16       	cp	r1, r24
     c84:	4c f5       	brge	.+82     	; 0xcd8 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c86:	6d a9       	ldd	r22, Y+53	; 0x35
     c88:	7e a9       	ldd	r23, Y+54	; 0x36
     c8a:	8f a9       	ldd	r24, Y+55	; 0x37
     c8c:	98 ad       	ldd	r25, Y+56	; 0x38
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e2       	ldi	r20, 0x20	; 32
     c94:	51 e4       	ldi	r21, 0x41	; 65
     c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	bc 01       	movw	r22, r24
     ca0:	cd 01       	movw	r24, r26
     ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	98 ab       	std	Y+48, r25	; 0x30
     cac:	8f a7       	std	Y+47, r24	; 0x2f
     cae:	0f c0       	rjmp	.+30     	; 0xcce <H_Lcd_Void_LCDWriteCharacter+0x126>
     cb0:	88 ec       	ldi	r24, 0xC8	; 200
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	9e a7       	std	Y+46, r25	; 0x2e
     cb6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb8:	8d a5       	ldd	r24, Y+45	; 0x2d
     cba:	9e a5       	ldd	r25, Y+46	; 0x2e
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <H_Lcd_Void_LCDWriteCharacter+0x114>
     cc0:	9e a7       	std	Y+46, r25	; 0x2e
     cc2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc4:	8f a5       	ldd	r24, Y+47	; 0x2f
     cc6:	98 a9       	ldd	r25, Y+48	; 0x30
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	98 ab       	std	Y+48, r25	; 0x30
     ccc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cce:	8f a5       	ldd	r24, Y+47	; 0x2f
     cd0:	98 a9       	ldd	r25, Y+48	; 0x30
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	69 f7       	brne	.-38     	; 0xcb0 <H_Lcd_Void_LCDWriteCharacter+0x108>
     cd6:	14 c0       	rjmp	.+40     	; 0xd00 <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd8:	69 a9       	ldd	r22, Y+49	; 0x31
     cda:	7a a9       	ldd	r23, Y+50	; 0x32
     cdc:	8b a9       	ldd	r24, Y+51	; 0x33
     cde:	9c a9       	ldd	r25, Y+52	; 0x34
     ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	98 ab       	std	Y+48, r25	; 0x30
     cea:	8f a7       	std	Y+47, r24	; 0x2f
     cec:	8f a5       	ldd	r24, Y+47	; 0x2f
     cee:	98 a9       	ldd	r25, Y+48	; 0x30
     cf0:	9c a7       	std	Y+44, r25	; 0x2c
     cf2:	8b a7       	std	Y+43, r24	; 0x2b
     cf4:	8b a5       	ldd	r24, Y+43	; 0x2b
     cf6:	9c a5       	ldd	r25, Y+44	; 0x2c
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <H_Lcd_Void_LCDWriteCharacter+0x150>
     cfc:	9c a7       	std	Y+44, r25	; 0x2c
     cfe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     d00:	8c e0       	ldi	r24, 0x0C	; 12
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	a0 e8       	ldi	r26, 0x80	; 128
     d0e:	bf e3       	ldi	r27, 0x3F	; 63
     d10:	8f a3       	std	Y+39, r24	; 0x27
     d12:	98 a7       	std	Y+40, r25	; 0x28
     d14:	a9 a7       	std	Y+41, r26	; 0x29
     d16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d18:	6f a1       	ldd	r22, Y+39	; 0x27
     d1a:	78 a5       	ldd	r23, Y+40	; 0x28
     d1c:	89 a5       	ldd	r24, Y+41	; 0x29
     d1e:	9a a5       	ldd	r25, Y+42	; 0x2a
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	4a ef       	ldi	r20, 0xFA	; 250
     d26:	54 e4       	ldi	r21, 0x44	; 68
     d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	8b a3       	std	Y+35, r24	; 0x23
     d32:	9c a3       	std	Y+36, r25	; 0x24
     d34:	ad a3       	std	Y+37, r26	; 0x25
     d36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d38:	6b a1       	ldd	r22, Y+35	; 0x23
     d3a:	7c a1       	ldd	r23, Y+36	; 0x24
     d3c:	8d a1       	ldd	r24, Y+37	; 0x25
     d3e:	9e a1       	ldd	r25, Y+38	; 0x26
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e8       	ldi	r20, 0x80	; 128
     d46:	5f e3       	ldi	r21, 0x3F	; 63
     d48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d4c:	88 23       	and	r24, r24
     d4e:	2c f4       	brge	.+10     	; 0xd5a <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	9a a3       	std	Y+34, r25	; 0x22
     d56:	89 a3       	std	Y+33, r24	; 0x21
     d58:	3f c0       	rjmp	.+126    	; 0xdd8 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
     d5a:	6b a1       	ldd	r22, Y+35	; 0x23
     d5c:	7c a1       	ldd	r23, Y+36	; 0x24
     d5e:	8d a1       	ldd	r24, Y+37	; 0x25
     d60:	9e a1       	ldd	r25, Y+38	; 0x26
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	3f ef       	ldi	r19, 0xFF	; 255
     d66:	4f e7       	ldi	r20, 0x7F	; 127
     d68:	57 e4       	ldi	r21, 0x47	; 71
     d6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d6e:	18 16       	cp	r1, r24
     d70:	4c f5       	brge	.+82     	; 0xdc4 <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d72:	6f a1       	ldd	r22, Y+39	; 0x27
     d74:	78 a5       	ldd	r23, Y+40	; 0x28
     d76:	89 a5       	ldd	r24, Y+41	; 0x29
     d78:	9a a5       	ldd	r25, Y+42	; 0x2a
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e2       	ldi	r20, 0x20	; 32
     d80:	51 e4       	ldi	r21, 0x41	; 65
     d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	bc 01       	movw	r22, r24
     d8c:	cd 01       	movw	r24, r26
     d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	9a a3       	std	Y+34, r25	; 0x22
     d98:	89 a3       	std	Y+33, r24	; 0x21
     d9a:	0f c0       	rjmp	.+30     	; 0xdba <H_Lcd_Void_LCDWriteCharacter+0x212>
     d9c:	88 ec       	ldi	r24, 0xC8	; 200
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	98 a3       	std	Y+32, r25	; 0x20
     da2:	8f 8f       	std	Y+31, r24	; 0x1f
     da4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     da6:	98 a1       	ldd	r25, Y+32	; 0x20
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <H_Lcd_Void_LCDWriteCharacter+0x200>
     dac:	98 a3       	std	Y+32, r25	; 0x20
     dae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db0:	89 a1       	ldd	r24, Y+33	; 0x21
     db2:	9a a1       	ldd	r25, Y+34	; 0x22
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	9a a3       	std	Y+34, r25	; 0x22
     db8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dba:	89 a1       	ldd	r24, Y+33	; 0x21
     dbc:	9a a1       	ldd	r25, Y+34	; 0x22
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	69 f7       	brne	.-38     	; 0xd9c <H_Lcd_Void_LCDWriteCharacter+0x1f4>
     dc2:	14 c0       	rjmp	.+40     	; 0xdec <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc4:	6b a1       	ldd	r22, Y+35	; 0x23
     dc6:	7c a1       	ldd	r23, Y+36	; 0x24
     dc8:	8d a1       	ldd	r24, Y+37	; 0x25
     dca:	9e a1       	ldd	r25, Y+38	; 0x26
     dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	9a a3       	std	Y+34, r25	; 0x22
     dd6:	89 a3       	std	Y+33, r24	; 0x21
     dd8:	89 a1       	ldd	r24, Y+33	; 0x21
     dda:	9a a1       	ldd	r25, Y+34	; 0x22
     ddc:	9e 8f       	std	Y+30, r25	; 0x1e
     dde:	8d 8f       	std	Y+29, r24	; 0x1d
     de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     de2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <H_Lcd_Void_LCDWriteCharacter+0x23c>
     de8:	9e 8f       	std	Y+30, r25	; 0x1e
     dea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
     dec:	89 ad       	ldd	r24, Y+57	; 0x39
     dee:	98 2f       	mov	r25, r24
     df0:	91 70       	andi	r25, 0x01	; 1
     df2:	84 e1       	ldi	r24, 0x14	; 20
     df4:	69 2f       	mov	r22, r25
     df6:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
     dfa:	89 ad       	ldd	r24, Y+57	; 0x39
     dfc:	86 95       	lsr	r24
     dfe:	98 2f       	mov	r25, r24
     e00:	91 70       	andi	r25, 0x01	; 1
     e02:	85 e1       	ldi	r24, 0x15	; 21
     e04:	69 2f       	mov	r22, r25
     e06:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
     e0a:	89 ad       	ldd	r24, Y+57	; 0x39
     e0c:	86 95       	lsr	r24
     e0e:	86 95       	lsr	r24
     e10:	98 2f       	mov	r25, r24
     e12:	91 70       	andi	r25, 0x01	; 1
     e14:	86 e1       	ldi	r24, 0x16	; 22
     e16:	69 2f       	mov	r22, r25
     e18:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
     e1c:	89 ad       	ldd	r24, Y+57	; 0x39
     e1e:	86 95       	lsr	r24
     e20:	86 95       	lsr	r24
     e22:	86 95       	lsr	r24
     e24:	98 2f       	mov	r25, r24
     e26:	91 70       	andi	r25, 0x01	; 1
     e28:	88 e1       	ldi	r24, 0x18	; 24
     e2a:	69 2f       	mov	r22, r25
     e2c:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     e30:	8c e0       	ldi	r24, 0x0C	; 12
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	a0 e8       	ldi	r26, 0x80	; 128
     e3e:	bf e3       	ldi	r27, 0x3F	; 63
     e40:	89 8f       	std	Y+25, r24	; 0x19
     e42:	9a 8f       	std	Y+26, r25	; 0x1a
     e44:	ab 8f       	std	Y+27, r26	; 0x1b
     e46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e48:	69 8d       	ldd	r22, Y+25	; 0x19
     e4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	4a ef       	ldi	r20, 0xFA	; 250
     e56:	54 e4       	ldi	r21, 0x44	; 68
     e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	8d 8b       	std	Y+21, r24	; 0x15
     e62:	9e 8b       	std	Y+22, r25	; 0x16
     e64:	af 8b       	std	Y+23, r26	; 0x17
     e66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e68:	6d 89       	ldd	r22, Y+21	; 0x15
     e6a:	7e 89       	ldd	r23, Y+22	; 0x16
     e6c:	8f 89       	ldd	r24, Y+23	; 0x17
     e6e:	98 8d       	ldd	r25, Y+24	; 0x18
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e7c:	88 23       	and	r24, r24
     e7e:	2c f4       	brge	.+10     	; 0xe8a <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9c 8b       	std	Y+20, r25	; 0x14
     e86:	8b 8b       	std	Y+19, r24	; 0x13
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
     e8a:	6d 89       	ldd	r22, Y+21	; 0x15
     e8c:	7e 89       	ldd	r23, Y+22	; 0x16
     e8e:	8f 89       	ldd	r24, Y+23	; 0x17
     e90:	98 8d       	ldd	r25, Y+24	; 0x18
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	4f e7       	ldi	r20, 0x7F	; 127
     e98:	57 e4       	ldi	r21, 0x47	; 71
     e9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9e:	18 16       	cp	r1, r24
     ea0:	4c f5       	brge	.+82     	; 0xef4 <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea2:	69 8d       	ldd	r22, Y+25	; 0x19
     ea4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e2       	ldi	r20, 0x20	; 32
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	bc 01       	movw	r22, r24
     ebc:	cd 01       	movw	r24, r26
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9c 8b       	std	Y+20, r25	; 0x14
     ec8:	8b 8b       	std	Y+19, r24	; 0x13
     eca:	0f c0       	rjmp	.+30     	; 0xeea <H_Lcd_Void_LCDWriteCharacter+0x342>
     ecc:	88 ec       	ldi	r24, 0xC8	; 200
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9a 8b       	std	Y+18, r25	; 0x12
     ed2:	89 8b       	std	Y+17, r24	; 0x11
     ed4:	89 89       	ldd	r24, Y+17	; 0x11
     ed6:	9a 89       	ldd	r25, Y+18	; 0x12
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <H_Lcd_Void_LCDWriteCharacter+0x330>
     edc:	9a 8b       	std	Y+18, r25	; 0x12
     ede:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee0:	8b 89       	ldd	r24, Y+19	; 0x13
     ee2:	9c 89       	ldd	r25, Y+20	; 0x14
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	9c 8b       	std	Y+20, r25	; 0x14
     ee8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eea:	8b 89       	ldd	r24, Y+19	; 0x13
     eec:	9c 89       	ldd	r25, Y+20	; 0x14
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	69 f7       	brne	.-38     	; 0xecc <H_Lcd_Void_LCDWriteCharacter+0x324>
     ef2:	14 c0       	rjmp	.+40     	; 0xf1c <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef4:	6d 89       	ldd	r22, Y+21	; 0x15
     ef6:	7e 89       	ldd	r23, Y+22	; 0x16
     ef8:	8f 89       	ldd	r24, Y+23	; 0x17
     efa:	98 8d       	ldd	r25, Y+24	; 0x18
     efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9c 8b       	std	Y+20, r25	; 0x14
     f06:	8b 8b       	std	Y+19, r24	; 0x13
     f08:	8b 89       	ldd	r24, Y+19	; 0x13
     f0a:	9c 89       	ldd	r25, Y+20	; 0x14
     f0c:	98 8b       	std	Y+16, r25	; 0x10
     f0e:	8f 87       	std	Y+15, r24	; 0x0f
     f10:	8f 85       	ldd	r24, Y+15	; 0x0f
     f12:	98 89       	ldd	r25, Y+16	; 0x10
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <H_Lcd_Void_LCDWriteCharacter+0x36c>
     f18:	98 8b       	std	Y+16, r25	; 0x10
     f1a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     f1c:	8c e0       	ldi	r24, 0x0C	; 12
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	a0 ea       	ldi	r26, 0xA0	; 160
     f2a:	b0 e4       	ldi	r27, 0x40	; 64
     f2c:	8b 87       	std	Y+11, r24	; 0x0b
     f2e:	9c 87       	std	Y+12, r25	; 0x0c
     f30:	ad 87       	std	Y+13, r26	; 0x0d
     f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f34:	6b 85       	ldd	r22, Y+11	; 0x0b
     f36:	7c 85       	ldd	r23, Y+12	; 0x0c
     f38:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	4a ef       	ldi	r20, 0xFA	; 250
     f42:	54 e4       	ldi	r21, 0x44	; 68
     f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	8f 83       	std	Y+7, r24	; 0x07
     f4e:	98 87       	std	Y+8, r25	; 0x08
     f50:	a9 87       	std	Y+9, r26	; 0x09
     f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f54:	6f 81       	ldd	r22, Y+7	; 0x07
     f56:	78 85       	ldd	r23, Y+8	; 0x08
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e8       	ldi	r20, 0x80	; 128
     f62:	5f e3       	ldi	r21, 0x3F	; 63
     f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f68:	88 23       	and	r24, r24
     f6a:	2c f4       	brge	.+10     	; 0xf76 <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9e 83       	std	Y+6, r25	; 0x06
     f72:	8d 83       	std	Y+5, r24	; 0x05
     f74:	3f c0       	rjmp	.+126    	; 0xff4 <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
     f76:	6f 81       	ldd	r22, Y+7	; 0x07
     f78:	78 85       	ldd	r23, Y+8	; 0x08
     f7a:	89 85       	ldd	r24, Y+9	; 0x09
     f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	4f e7       	ldi	r20, 0x7F	; 127
     f84:	57 e4       	ldi	r21, 0x47	; 71
     f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8a:	18 16       	cp	r1, r24
     f8c:	4c f5       	brge	.+82     	; 0xfe0 <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f90:	7c 85       	ldd	r23, Y+12	; 0x0c
     f92:	8d 85       	ldd	r24, Y+13	; 0x0d
     f94:	9e 85       	ldd	r25, Y+14	; 0x0e
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e2       	ldi	r20, 0x20	; 32
     f9c:	51 e4       	ldi	r21, 0x41	; 65
     f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	bc 01       	movw	r22, r24
     fa8:	cd 01       	movw	r24, r26
     faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	9e 83       	std	Y+6, r25	; 0x06
     fb4:	8d 83       	std	Y+5, r24	; 0x05
     fb6:	0f c0       	rjmp	.+30     	; 0xfd6 <H_Lcd_Void_LCDWriteCharacter+0x42e>
     fb8:	88 ec       	ldi	r24, 0xC8	; 200
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9c 83       	std	Y+4, r25	; 0x04
     fbe:	8b 83       	std	Y+3, r24	; 0x03
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <H_Lcd_Void_LCDWriteCharacter+0x41c>
     fc8:	9c 83       	std	Y+4, r25	; 0x04
     fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	9e 83       	std	Y+6, r25	; 0x06
     fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	9e 81       	ldd	r25, Y+6	; 0x06
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	69 f7       	brne	.-38     	; 0xfb8 <H_Lcd_Void_LCDWriteCharacter+0x410>
     fde:	14 c0       	rjmp	.+40     	; 0x1008 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe0:	6f 81       	ldd	r22, Y+7	; 0x07
     fe2:	78 85       	ldd	r23, Y+8	; 0x08
     fe4:	89 85       	ldd	r24, Y+9	; 0x09
     fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <H_Lcd_Void_LCDWriteCharacter+0x458>
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    1008:	e9 96       	adiw	r28, 0x39	; 57
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	e9 97       	sbiw	r28, 0x39	; 57
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    1030:	8d e0       	ldi	r24, 0x0D	; 13
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    1038:	89 ad       	ldd	r24, Y+57	; 0x39
    103a:	82 95       	swap	r24
    103c:	8f 70       	andi	r24, 0x0F	; 15
    103e:	98 2f       	mov	r25, r24
    1040:	91 70       	andi	r25, 0x01	; 1
    1042:	84 e1       	ldi	r24, 0x14	; 20
    1044:	69 2f       	mov	r22, r25
    1046:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    104a:	89 ad       	ldd	r24, Y+57	; 0x39
    104c:	82 95       	swap	r24
    104e:	86 95       	lsr	r24
    1050:	87 70       	andi	r24, 0x07	; 7
    1052:	98 2f       	mov	r25, r24
    1054:	91 70       	andi	r25, 0x01	; 1
    1056:	85 e1       	ldi	r24, 0x15	; 21
    1058:	69 2f       	mov	r22, r25
    105a:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    105e:	89 ad       	ldd	r24, Y+57	; 0x39
    1060:	82 95       	swap	r24
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	83 70       	andi	r24, 0x03	; 3
    1068:	98 2f       	mov	r25, r24
    106a:	91 70       	andi	r25, 0x01	; 1
    106c:	86 e1       	ldi	r24, 0x16	; 22
    106e:	69 2f       	mov	r22, r25
    1070:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    1074:	89 ad       	ldd	r24, Y+57	; 0x39
    1076:	98 2f       	mov	r25, r24
    1078:	99 1f       	adc	r25, r25
    107a:	99 27       	eor	r25, r25
    107c:	99 1f       	adc	r25, r25
    107e:	88 e1       	ldi	r24, 0x18	; 24
    1080:	69 2f       	mov	r22, r25
    1082:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1086:	8c e0       	ldi	r24, 0x0C	; 12
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	a0 e8       	ldi	r26, 0x80	; 128
    1094:	bf e3       	ldi	r27, 0x3F	; 63
    1096:	8d ab       	std	Y+53, r24	; 0x35
    1098:	9e ab       	std	Y+54, r25	; 0x36
    109a:	af ab       	std	Y+55, r26	; 0x37
    109c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    109e:	6d a9       	ldd	r22, Y+53	; 0x35
    10a0:	7e a9       	ldd	r23, Y+54	; 0x36
    10a2:	8f a9       	ldd	r24, Y+55	; 0x37
    10a4:	98 ad       	ldd	r25, Y+56	; 0x38
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	4a ef       	ldi	r20, 0xFA	; 250
    10ac:	54 e4       	ldi	r21, 0x44	; 68
    10ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	89 ab       	std	Y+49, r24	; 0x31
    10b8:	9a ab       	std	Y+50, r25	; 0x32
    10ba:	ab ab       	std	Y+51, r26	; 0x33
    10bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10be:	69 a9       	ldd	r22, Y+49	; 0x31
    10c0:	7a a9       	ldd	r23, Y+50	; 0x32
    10c2:	8b a9       	ldd	r24, Y+51	; 0x33
    10c4:	9c a9       	ldd	r25, Y+52	; 0x34
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e8       	ldi	r20, 0x80	; 128
    10cc:	5f e3       	ldi	r21, 0x3F	; 63
    10ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d2:	88 23       	and	r24, r24
    10d4:	2c f4       	brge	.+10     	; 0x10e0 <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	98 ab       	std	Y+48, r25	; 0x30
    10dc:	8f a7       	std	Y+47, r24	; 0x2f
    10de:	3f c0       	rjmp	.+126    	; 0x115e <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    10e0:	69 a9       	ldd	r22, Y+49	; 0x31
    10e2:	7a a9       	ldd	r23, Y+50	; 0x32
    10e4:	8b a9       	ldd	r24, Y+51	; 0x33
    10e6:	9c a9       	ldd	r25, Y+52	; 0x34
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	3f ef       	ldi	r19, 0xFF	; 255
    10ec:	4f e7       	ldi	r20, 0x7F	; 127
    10ee:	57 e4       	ldi	r21, 0x47	; 71
    10f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f4:	18 16       	cp	r1, r24
    10f6:	4c f5       	brge	.+82     	; 0x114a <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f8:	6d a9       	ldd	r22, Y+53	; 0x35
    10fa:	7e a9       	ldd	r23, Y+54	; 0x36
    10fc:	8f a9       	ldd	r24, Y+55	; 0x37
    10fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e2       	ldi	r20, 0x20	; 32
    1106:	51 e4       	ldi	r21, 0x41	; 65
    1108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	98 ab       	std	Y+48, r25	; 0x30
    111e:	8f a7       	std	Y+47, r24	; 0x2f
    1120:	0f c0       	rjmp	.+30     	; 0x1140 <H_Lcd_Void_LCDWriteCommand+0x126>
    1122:	88 ec       	ldi	r24, 0xC8	; 200
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9e a7       	std	Y+46, r25	; 0x2e
    1128:	8d a7       	std	Y+45, r24	; 0x2d
    112a:	8d a5       	ldd	r24, Y+45	; 0x2d
    112c:	9e a5       	ldd	r25, Y+46	; 0x2e
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <H_Lcd_Void_LCDWriteCommand+0x114>
    1132:	9e a7       	std	Y+46, r25	; 0x2e
    1134:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1136:	8f a5       	ldd	r24, Y+47	; 0x2f
    1138:	98 a9       	ldd	r25, Y+48	; 0x30
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	98 ab       	std	Y+48, r25	; 0x30
    113e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1140:	8f a5       	ldd	r24, Y+47	; 0x2f
    1142:	98 a9       	ldd	r25, Y+48	; 0x30
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	69 f7       	brne	.-38     	; 0x1122 <H_Lcd_Void_LCDWriteCommand+0x108>
    1148:	14 c0       	rjmp	.+40     	; 0x1172 <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114a:	69 a9       	ldd	r22, Y+49	; 0x31
    114c:	7a a9       	ldd	r23, Y+50	; 0x32
    114e:	8b a9       	ldd	r24, Y+51	; 0x33
    1150:	9c a9       	ldd	r25, Y+52	; 0x34
    1152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	98 ab       	std	Y+48, r25	; 0x30
    115c:	8f a7       	std	Y+47, r24	; 0x2f
    115e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1160:	98 a9       	ldd	r25, Y+48	; 0x30
    1162:	9c a7       	std	Y+44, r25	; 0x2c
    1164:	8b a7       	std	Y+43, r24	; 0x2b
    1166:	8b a5       	ldd	r24, Y+43	; 0x2b
    1168:	9c a5       	ldd	r25, Y+44	; 0x2c
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	f1 f7       	brne	.-4      	; 0x116a <H_Lcd_Void_LCDWriteCommand+0x150>
    116e:	9c a7       	std	Y+44, r25	; 0x2c
    1170:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1172:	8c e0       	ldi	r24, 0x0C	; 12
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a0 e8       	ldi	r26, 0x80	; 128
    1180:	bf e3       	ldi	r27, 0x3F	; 63
    1182:	8f a3       	std	Y+39, r24	; 0x27
    1184:	98 a7       	std	Y+40, r25	; 0x28
    1186:	a9 a7       	std	Y+41, r26	; 0x29
    1188:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118a:	6f a1       	ldd	r22, Y+39	; 0x27
    118c:	78 a5       	ldd	r23, Y+40	; 0x28
    118e:	89 a5       	ldd	r24, Y+41	; 0x29
    1190:	9a a5       	ldd	r25, Y+42	; 0x2a
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	4a ef       	ldi	r20, 0xFA	; 250
    1198:	54 e4       	ldi	r21, 0x44	; 68
    119a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	8b a3       	std	Y+35, r24	; 0x23
    11a4:	9c a3       	std	Y+36, r25	; 0x24
    11a6:	ad a3       	std	Y+37, r26	; 0x25
    11a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11aa:	6b a1       	ldd	r22, Y+35	; 0x23
    11ac:	7c a1       	ldd	r23, Y+36	; 0x24
    11ae:	8d a1       	ldd	r24, Y+37	; 0x25
    11b0:	9e a1       	ldd	r25, Y+38	; 0x26
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e8       	ldi	r20, 0x80	; 128
    11b8:	5f e3       	ldi	r21, 0x3F	; 63
    11ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11be:	88 23       	and	r24, r24
    11c0:	2c f4       	brge	.+10     	; 0x11cc <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	9a a3       	std	Y+34, r25	; 0x22
    11c8:	89 a3       	std	Y+33, r24	; 0x21
    11ca:	3f c0       	rjmp	.+126    	; 0x124a <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    11cc:	6b a1       	ldd	r22, Y+35	; 0x23
    11ce:	7c a1       	ldd	r23, Y+36	; 0x24
    11d0:	8d a1       	ldd	r24, Y+37	; 0x25
    11d2:	9e a1       	ldd	r25, Y+38	; 0x26
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	3f ef       	ldi	r19, 0xFF	; 255
    11d8:	4f e7       	ldi	r20, 0x7F	; 127
    11da:	57 e4       	ldi	r21, 0x47	; 71
    11dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e0:	18 16       	cp	r1, r24
    11e2:	4c f5       	brge	.+82     	; 0x1236 <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e4:	6f a1       	ldd	r22, Y+39	; 0x27
    11e6:	78 a5       	ldd	r23, Y+40	; 0x28
    11e8:	89 a5       	ldd	r24, Y+41	; 0x29
    11ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e2       	ldi	r20, 0x20	; 32
    11f2:	51 e4       	ldi	r21, 0x41	; 65
    11f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9a a3       	std	Y+34, r25	; 0x22
    120a:	89 a3       	std	Y+33, r24	; 0x21
    120c:	0f c0       	rjmp	.+30     	; 0x122c <H_Lcd_Void_LCDWriteCommand+0x212>
    120e:	88 ec       	ldi	r24, 0xC8	; 200
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	98 a3       	std	Y+32, r25	; 0x20
    1214:	8f 8f       	std	Y+31, r24	; 0x1f
    1216:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1218:	98 a1       	ldd	r25, Y+32	; 0x20
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <H_Lcd_Void_LCDWriteCommand+0x200>
    121e:	98 a3       	std	Y+32, r25	; 0x20
    1220:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1222:	89 a1       	ldd	r24, Y+33	; 0x21
    1224:	9a a1       	ldd	r25, Y+34	; 0x22
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	9a a3       	std	Y+34, r25	; 0x22
    122a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122c:	89 a1       	ldd	r24, Y+33	; 0x21
    122e:	9a a1       	ldd	r25, Y+34	; 0x22
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	69 f7       	brne	.-38     	; 0x120e <H_Lcd_Void_LCDWriteCommand+0x1f4>
    1234:	14 c0       	rjmp	.+40     	; 0x125e <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1236:	6b a1       	ldd	r22, Y+35	; 0x23
    1238:	7c a1       	ldd	r23, Y+36	; 0x24
    123a:	8d a1       	ldd	r24, Y+37	; 0x25
    123c:	9e a1       	ldd	r25, Y+38	; 0x26
    123e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	9a a3       	std	Y+34, r25	; 0x22
    1248:	89 a3       	std	Y+33, r24	; 0x21
    124a:	89 a1       	ldd	r24, Y+33	; 0x21
    124c:	9a a1       	ldd	r25, Y+34	; 0x22
    124e:	9e 8f       	std	Y+30, r25	; 0x1e
    1250:	8d 8f       	std	Y+29, r24	; 0x1d
    1252:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1254:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <H_Lcd_Void_LCDWriteCommand+0x23c>
    125a:	9e 8f       	std	Y+30, r25	; 0x1e
    125c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    125e:	89 ad       	ldd	r24, Y+57	; 0x39
    1260:	98 2f       	mov	r25, r24
    1262:	91 70       	andi	r25, 0x01	; 1
    1264:	84 e1       	ldi	r24, 0x14	; 20
    1266:	69 2f       	mov	r22, r25
    1268:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    126c:	89 ad       	ldd	r24, Y+57	; 0x39
    126e:	86 95       	lsr	r24
    1270:	98 2f       	mov	r25, r24
    1272:	91 70       	andi	r25, 0x01	; 1
    1274:	85 e1       	ldi	r24, 0x15	; 21
    1276:	69 2f       	mov	r22, r25
    1278:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    127c:	89 ad       	ldd	r24, Y+57	; 0x39
    127e:	86 95       	lsr	r24
    1280:	86 95       	lsr	r24
    1282:	98 2f       	mov	r25, r24
    1284:	91 70       	andi	r25, 0x01	; 1
    1286:	86 e1       	ldi	r24, 0x16	; 22
    1288:	69 2f       	mov	r22, r25
    128a:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    128e:	89 ad       	ldd	r24, Y+57	; 0x39
    1290:	86 95       	lsr	r24
    1292:	86 95       	lsr	r24
    1294:	86 95       	lsr	r24
    1296:	98 2f       	mov	r25, r24
    1298:	91 70       	andi	r25, 0x01	; 1
    129a:	88 e1       	ldi	r24, 0x18	; 24
    129c:	69 2f       	mov	r22, r25
    129e:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    12a2:	8c e0       	ldi	r24, 0x0C	; 12
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a0 e8       	ldi	r26, 0x80	; 128
    12b0:	bf e3       	ldi	r27, 0x3F	; 63
    12b2:	89 8f       	std	Y+25, r24	; 0x19
    12b4:	9a 8f       	std	Y+26, r25	; 0x1a
    12b6:	ab 8f       	std	Y+27, r26	; 0x1b
    12b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ba:	69 8d       	ldd	r22, Y+25	; 0x19
    12bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	4a ef       	ldi	r20, 0xFA	; 250
    12c8:	54 e4       	ldi	r21, 0x44	; 68
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	8d 8b       	std	Y+21, r24	; 0x15
    12d4:	9e 8b       	std	Y+22, r25	; 0x16
    12d6:	af 8b       	std	Y+23, r26	; 0x17
    12d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12da:	6d 89       	ldd	r22, Y+21	; 0x15
    12dc:	7e 89       	ldd	r23, Y+22	; 0x16
    12de:	8f 89       	ldd	r24, Y+23	; 0x17
    12e0:	98 8d       	ldd	r25, Y+24	; 0x18
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e8       	ldi	r20, 0x80	; 128
    12e8:	5f e3       	ldi	r21, 0x3F	; 63
    12ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ee:	88 23       	and	r24, r24
    12f0:	2c f4       	brge	.+10     	; 0x12fc <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9c 8b       	std	Y+20, r25	; 0x14
    12f8:	8b 8b       	std	Y+19, r24	; 0x13
    12fa:	3f c0       	rjmp	.+126    	; 0x137a <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    12fc:	6d 89       	ldd	r22, Y+21	; 0x15
    12fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1300:	8f 89       	ldd	r24, Y+23	; 0x17
    1302:	98 8d       	ldd	r25, Y+24	; 0x18
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f e7       	ldi	r20, 0x7F	; 127
    130a:	57 e4       	ldi	r21, 0x47	; 71
    130c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1310:	18 16       	cp	r1, r24
    1312:	4c f5       	brge	.+82     	; 0x1366 <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1314:	69 8d       	ldd	r22, Y+25	; 0x19
    1316:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1318:	8b 8d       	ldd	r24, Y+27	; 0x1b
    131a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e2       	ldi	r20, 0x20	; 32
    1322:	51 e4       	ldi	r21, 0x41	; 65
    1324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9c 8b       	std	Y+20, r25	; 0x14
    133a:	8b 8b       	std	Y+19, r24	; 0x13
    133c:	0f c0       	rjmp	.+30     	; 0x135c <H_Lcd_Void_LCDWriteCommand+0x342>
    133e:	88 ec       	ldi	r24, 0xC8	; 200
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9a 8b       	std	Y+18, r25	; 0x12
    1344:	89 8b       	std	Y+17, r24	; 0x11
    1346:	89 89       	ldd	r24, Y+17	; 0x11
    1348:	9a 89       	ldd	r25, Y+18	; 0x12
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <H_Lcd_Void_LCDWriteCommand+0x330>
    134e:	9a 8b       	std	Y+18, r25	; 0x12
    1350:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1352:	8b 89       	ldd	r24, Y+19	; 0x13
    1354:	9c 89       	ldd	r25, Y+20	; 0x14
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	9c 8b       	std	Y+20, r25	; 0x14
    135a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135c:	8b 89       	ldd	r24, Y+19	; 0x13
    135e:	9c 89       	ldd	r25, Y+20	; 0x14
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	69 f7       	brne	.-38     	; 0x133e <H_Lcd_Void_LCDWriteCommand+0x324>
    1364:	14 c0       	rjmp	.+40     	; 0x138e <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1366:	6d 89       	ldd	r22, Y+21	; 0x15
    1368:	7e 89       	ldd	r23, Y+22	; 0x16
    136a:	8f 89       	ldd	r24, Y+23	; 0x17
    136c:	98 8d       	ldd	r25, Y+24	; 0x18
    136e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9c 8b       	std	Y+20, r25	; 0x14
    1378:	8b 8b       	std	Y+19, r24	; 0x13
    137a:	8b 89       	ldd	r24, Y+19	; 0x13
    137c:	9c 89       	ldd	r25, Y+20	; 0x14
    137e:	98 8b       	std	Y+16, r25	; 0x10
    1380:	8f 87       	std	Y+15, r24	; 0x0f
    1382:	8f 85       	ldd	r24, Y+15	; 0x0f
    1384:	98 89       	ldd	r25, Y+16	; 0x10
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <H_Lcd_Void_LCDWriteCommand+0x36c>
    138a:	98 8b       	std	Y+16, r25	; 0x10
    138c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    138e:	8c e0       	ldi	r24, 0x0C	; 12
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	0e 94 3e 0c 	call	0x187c	; 0x187c <M_DIO_Void_SetPinValue>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 ea       	ldi	r26, 0xA0	; 160
    139c:	b0 e4       	ldi	r27, 0x40	; 64
    139e:	8b 87       	std	Y+11, r24	; 0x0b
    13a0:	9c 87       	std	Y+12, r25	; 0x0c
    13a2:	ad 87       	std	Y+13, r26	; 0x0d
    13a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4a ef       	ldi	r20, 0xFA	; 250
    13b4:	54 e4       	ldi	r21, 0x44	; 68
    13b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	8f 83       	std	Y+7, r24	; 0x07
    13c0:	98 87       	std	Y+8, r25	; 0x08
    13c2:	a9 87       	std	Y+9, r26	; 0x09
    13c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c6:	6f 81       	ldd	r22, Y+7	; 0x07
    13c8:	78 85       	ldd	r23, Y+8	; 0x08
    13ca:	89 85       	ldd	r24, Y+9	; 0x09
    13cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e8       	ldi	r20, 0x80	; 128
    13d4:	5f e3       	ldi	r21, 0x3F	; 63
    13d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13da:	88 23       	and	r24, r24
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
    13e6:	3f c0       	rjmp	.+126    	; 0x1466 <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    13e8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ea:	78 85       	ldd	r23, Y+8	; 0x08
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	3f ef       	ldi	r19, 0xFF	; 255
    13f4:	4f e7       	ldi	r20, 0x7F	; 127
    13f6:	57 e4       	ldi	r21, 0x47	; 71
    13f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fc:	18 16       	cp	r1, r24
    13fe:	4c f5       	brge	.+82     	; 0x1452 <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1400:	6b 85       	ldd	r22, Y+11	; 0x0b
    1402:	7c 85       	ldd	r23, Y+12	; 0x0c
    1404:	8d 85       	ldd	r24, Y+13	; 0x0d
    1406:	9e 85       	ldd	r25, Y+14	; 0x0e
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e2       	ldi	r20, 0x20	; 32
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 83       	std	Y+5, r24	; 0x05
    1428:	0f c0       	rjmp	.+30     	; 0x1448 <H_Lcd_Void_LCDWriteCommand+0x42e>
    142a:	88 ec       	ldi	r24, 0xC8	; 200
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9c 83       	std	Y+4, r25	; 0x04
    1430:	8b 83       	std	Y+3, r24	; 0x03
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <H_Lcd_Void_LCDWriteCommand+0x41c>
    143a:	9c 83       	std	Y+4, r25	; 0x04
    143c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	69 f7       	brne	.-38     	; 0x142a <H_Lcd_Void_LCDWriteCommand+0x410>
    1450:	14 c0       	rjmp	.+40     	; 0x147a <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1452:	6f 81       	ldd	r22, Y+7	; 0x07
    1454:	78 85       	ldd	r23, Y+8	; 0x08
    1456:	89 85       	ldd	r24, Y+9	; 0x09
    1458:	9a 85       	ldd	r25, Y+10	; 0x0a
    145a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	9e 83       	std	Y+6, r25	; 0x06
    1464:	8d 83       	std	Y+5, r24	; 0x05
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <H_Lcd_Void_LCDWriteCommand+0x458>
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    147a:	e9 96       	adiw	r28, 0x39	; 57
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <H_Lcd_Void_LCDWriteString+0x6>
    1492:	0f 92       	push	r0
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	9b 83       	std	Y+3, r25	; 0x03
    149a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    149c:	19 82       	std	Y+1, r1	; 0x01
    149e:	0e c0       	rjmp	.+28     	; 0x14bc <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	9b 81       	ldd	r25, Y+3	; 0x03
    14aa:	fc 01       	movw	r30, r24
    14ac:	e2 0f       	add	r30, r18
    14ae:	f3 1f       	adc	r31, r19
    14b0:	80 81       	ld	r24, Z
    14b2:	0e 94 d4 05 	call	0xba8	; 0xba8 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	8f 5f       	subi	r24, 0xFF	; 255
    14ba:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	9b 81       	ldd	r25, Y+3	; 0x03
    14c6:	fc 01       	movw	r30, r24
    14c8:	e2 0f       	add	r30, r18
    14ca:	f3 1f       	adc	r31, r19
    14cc:	80 81       	ld	r24, Z
    14ce:	88 23       	and	r24, r24
    14d0:	39 f7       	brne	.-50     	; 0x14a0 <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	0e 94 0d 08 	call	0x101a	; 0x101a <H_Lcd_Void_LCDWriteCommand>
}
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	2f 97       	sbiw	r28, 0x0f	; 15
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	6c 87       	std	Y+12, r22	; 0x0c
    150c:	7d 87       	std	Y+13, r23	; 0x0d
    150e:	8e 87       	std	Y+14, r24	; 0x0e
    1510:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    1512:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    1514:	8a e0       	ldi	r24, 0x0A	; 10
    1516:	fe 01       	movw	r30, r28
    1518:	32 96       	adiw	r30, 0x02	; 2
    151a:	df 01       	movw	r26, r30
    151c:	98 2f       	mov	r25, r24
    151e:	1d 92       	st	X+, r1
    1520:	9a 95       	dec	r25
    1522:	e9 f7       	brne	.-6      	; 0x151e <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    1524:	8c 85       	ldd	r24, Y+12	; 0x0c
    1526:	9d 85       	ldd	r25, Y+13	; 0x0d
    1528:	ae 85       	ldd	r26, Y+14	; 0x0e
    152a:	bf 85       	ldd	r27, Y+15	; 0x0f
    152c:	bb 23       	and	r27, r27
    152e:	94 f4       	brge	.+36     	; 0x1554 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    1530:	8c 85       	ldd	r24, Y+12	; 0x0c
    1532:	9d 85       	ldd	r25, Y+13	; 0x0d
    1534:	ae 85       	ldd	r26, Y+14	; 0x0e
    1536:	bf 85       	ldd	r27, Y+15	; 0x0f
    1538:	b0 95       	com	r27
    153a:	a0 95       	com	r26
    153c:	90 95       	com	r25
    153e:	81 95       	neg	r24
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	af 4f       	sbci	r26, 0xFF	; 255
    1544:	bf 4f       	sbci	r27, 0xFF	; 255
    1546:	8c 87       	std	Y+12, r24	; 0x0c
    1548:	9d 87       	std	Y+13, r25	; 0x0d
    154a:	ae 87       	std	Y+14, r26	; 0x0e
    154c:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    154e:	8d e2       	ldi	r24, 0x2D	; 45
    1550:	0e 94 d4 05 	call	0xba8	; 0xba8 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	08 2f       	mov	r16, r24
    1558:	11 27       	eor	r17, r17
    155a:	07 fd       	sbrc	r16, 7
    155c:	10 95       	com	r17
    155e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1560:	9d 85       	ldd	r25, Y+13	; 0x0d
    1562:	ae 85       	ldd	r26, Y+14	; 0x0e
    1564:	bf 85       	ldd	r27, Y+15	; 0x0f
    1566:	2a e0       	ldi	r18, 0x0A	; 10
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	0e 94 a3 10 	call	0x2146	; 0x2146 <__divmodsi4>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	28 2f       	mov	r18, r24
    157c:	ce 01       	movw	r24, r28
    157e:	02 96       	adiw	r24, 0x02	; 2
    1580:	fc 01       	movw	r30, r24
    1582:	e0 0f       	add	r30, r16
    1584:	f1 1f       	adc	r31, r17
    1586:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    1588:	8c 85       	ldd	r24, Y+12	; 0x0c
    158a:	9d 85       	ldd	r25, Y+13	; 0x0d
    158c:	ae 85       	ldd	r26, Y+14	; 0x0e
    158e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1590:	2a e0       	ldi	r18, 0x0A	; 10
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	0e 94 a3 10 	call	0x2146	; 0x2146 <__divmodsi4>
    15a0:	da 01       	movw	r26, r20
    15a2:	c9 01       	movw	r24, r18
    15a4:	8c 87       	std	Y+12, r24	; 0x0c
    15a6:	9d 87       	std	Y+13, r25	; 0x0d
    15a8:	ae 87       	std	Y+14, r26	; 0x0e
    15aa:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    15b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b6:	ae 85       	ldd	r26, Y+14	; 0x0e
    15b8:	bf 85       	ldd	r27, Y+15	; 0x0f
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	a1 05       	cpc	r26, r1
    15be:	b1 05       	cpc	r27, r1
    15c0:	49 f6       	brne	.-110    	; 0x1554 <H_Lcd_Void_LCDWriteNumber+0x62>
    15c2:	11 c0       	rjmp	.+34     	; 0x15e6 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	81 50       	subi	r24, 0x01	; 1
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	28 2f       	mov	r18, r24
    15ce:	33 27       	eor	r19, r19
    15d0:	27 fd       	sbrc	r18, 7
    15d2:	30 95       	com	r19
    15d4:	ce 01       	movw	r24, r28
    15d6:	02 96       	adiw	r24, 0x02	; 2
    15d8:	fc 01       	movw	r30, r24
    15da:	e2 0f       	add	r30, r18
    15dc:	f3 1f       	adc	r31, r19
    15de:	80 81       	ld	r24, Z
    15e0:	80 5d       	subi	r24, 0xD0	; 208
    15e2:	0e 94 d4 05 	call	0xba8	; 0xba8 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	18 16       	cp	r1, r24
    15ea:	64 f3       	brlt	.-40     	; 0x15c4 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    15ec:	2f 96       	adiw	r28, 0x0f	; 15
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	08 95       	ret

00001602 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <H_Lcd_Void_LCDGoTo+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <H_Lcd_Void_LCDGoTo+0x8>
    160a:	00 d0       	rcall	.+0      	; 0x160c <H_Lcd_Void_LCDGoTo+0xa>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	8d 83       	std	Y+5, r24	; 0x05
    1612:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    1614:	80 e8       	ldi	r24, 0x80	; 128
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	80 ec       	ldi	r24, 0xC0	; 192
    161a:	8a 83       	std	Y+2, r24	; 0x02
    161c:	84 e9       	ldi	r24, 0x94	; 148
    161e:	8b 83       	std	Y+3, r24	; 0x03
    1620:	84 ed       	ldi	r24, 0xD4	; 212
    1622:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	ce 01       	movw	r24, r28
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	fc 01       	movw	r30, r24
    1630:	e2 0f       	add	r30, r18
    1632:	f3 1f       	adc	r31, r19
    1634:	90 81       	ld	r25, Z
    1636:	8e 81       	ldd	r24, Y+6	; 0x06
    1638:	89 0f       	add	r24, r25
    163a:	0e 94 0d 08 	call	0x101a	; 0x101a <H_Lcd_Void_LCDWriteCommand>
}
    163e:	26 96       	adiw	r28, 0x06	; 6
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	2a 97       	sbiw	r28, 0x0a	; 10
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	8b 83       	std	Y+3, r24	; 0x03
    1666:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9a e0       	ldi	r25, 0x0A	; 10
    166c:	69 2f       	mov	r22, r25
    166e:	0e 94 97 10 	call	0x212e	; 0x212e <__udivmodqi4>
    1672:	89 2f       	mov	r24, r25
    1674:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9a e0       	ldi	r25, 0x0A	; 10
    167a:	69 2f       	mov	r22, r25
    167c:	0e 94 97 10 	call	0x212e	; 0x212e <__udivmodqi4>
    1680:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	3a 87       	std	Y+10, r19	; 0x0a
    168a:	29 87       	std	Y+9, r18	; 0x09
    168c:	89 85       	ldd	r24, Y+9	; 0x09
    168e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	39 f0       	breq	.+14     	; 0x16a2 <M_DIO_Void_SetPinDirection+0x52>
    1694:	29 85       	ldd	r18, Y+9	; 0x09
    1696:	3a 85       	ldd	r19, Y+10	; 0x0a
    1698:	21 30       	cpi	r18, 0x01	; 1
    169a:	31 05       	cpc	r19, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <M_DIO_Void_SetPinDirection+0x50>
    169e:	76 c0       	rjmp	.+236    	; 0x178c <M_DIO_Void_SetPinDirection+0x13c>
    16a0:	e4 c0       	rjmp	.+456    	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	38 87       	std	Y+8, r19	; 0x08
    16aa:	2f 83       	std	Y+7, r18	; 0x07
    16ac:	8f 81       	ldd	r24, Y+7	; 0x07
    16ae:	98 85       	ldd	r25, Y+8	; 0x08
    16b0:	82 30       	cpi	r24, 0x02	; 2
    16b2:	91 05       	cpc	r25, r1
    16b4:	61 f1       	breq	.+88     	; 0x170e <M_DIO_Void_SetPinDirection+0xbe>
    16b6:	2f 81       	ldd	r18, Y+7	; 0x07
    16b8:	38 85       	ldd	r19, Y+8	; 0x08
    16ba:	23 30       	cpi	r18, 0x03	; 3
    16bc:	31 05       	cpc	r19, r1
    16be:	34 f4       	brge	.+12     	; 0x16cc <M_DIO_Void_SetPinDirection+0x7c>
    16c0:	8f 81       	ldd	r24, Y+7	; 0x07
    16c2:	98 85       	ldd	r25, Y+8	; 0x08
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	91 05       	cpc	r25, r1
    16c8:	69 f0       	breq	.+26     	; 0x16e4 <M_DIO_Void_SetPinDirection+0x94>
    16ca:	cf c0       	rjmp	.+414    	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
    16cc:	2f 81       	ldd	r18, Y+7	; 0x07
    16ce:	38 85       	ldd	r19, Y+8	; 0x08
    16d0:	23 30       	cpi	r18, 0x03	; 3
    16d2:	31 05       	cpc	r19, r1
    16d4:	89 f1       	breq	.+98     	; 0x1738 <M_DIO_Void_SetPinDirection+0xe8>
    16d6:	8f 81       	ldd	r24, Y+7	; 0x07
    16d8:	98 85       	ldd	r25, Y+8	; 0x08
    16da:	84 30       	cpi	r24, 0x04	; 4
    16dc:	91 05       	cpc	r25, r1
    16de:	09 f4       	brne	.+2      	; 0x16e2 <M_DIO_Void_SetPinDirection+0x92>
    16e0:	40 c0       	rjmp	.+128    	; 0x1762 <M_DIO_Void_SetPinDirection+0x112>
    16e2:	c3 c0       	rjmp	.+390    	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
    16e4:	aa e3       	ldi	r26, 0x3A	; 58
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	ea e3       	ldi	r30, 0x3A	; 58
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <M_DIO_Void_SetPinDirection+0xb2>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <M_DIO_Void_SetPinDirection+0xae>
    1706:	80 95       	com	r24
    1708:	84 23       	and	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	ae c0       	rjmp	.+348    	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
    170e:	a7 e3       	ldi	r26, 0x37	; 55
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e7 e3       	ldi	r30, 0x37	; 55
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 2e       	mov	r0, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <M_DIO_Void_SetPinDirection+0xdc>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	0a 94       	dec	r0
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <M_DIO_Void_SetPinDirection+0xd8>
    1730:	80 95       	com	r24
    1732:	84 23       	and	r24, r20
    1734:	8c 93       	st	X, r24
    1736:	99 c0       	rjmp	.+306    	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    1738:	a4 e3       	ldi	r26, 0x34	; 52
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e4 e3       	ldi	r30, 0x34	; 52
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	48 2f       	mov	r20, r24
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 2e       	mov	r0, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <M_DIO_Void_SetPinDirection+0x106>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	0a 94       	dec	r0
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <M_DIO_Void_SetPinDirection+0x102>
    175a:	80 95       	com	r24
    175c:	84 23       	and	r24, r20
    175e:	8c 93       	st	X, r24
    1760:	84 c0       	rjmp	.+264    	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    1762:	a1 e3       	ldi	r26, 0x31	; 49
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e1 e3       	ldi	r30, 0x31	; 49
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <M_DIO_Void_SetPinDirection+0x130>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <M_DIO_Void_SetPinDirection+0x12c>
    1784:	80 95       	com	r24
    1786:	84 23       	and	r24, r20
    1788:	8c 93       	st	X, r24
    178a:	6f c0       	rjmp	.+222    	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	3e 83       	std	Y+6, r19	; 0x06
    1794:	2d 83       	std	Y+5, r18	; 0x05
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	91 05       	cpc	r25, r1
    179e:	51 f1       	breq	.+84     	; 0x17f4 <M_DIO_Void_SetPinDirection+0x1a4>
    17a0:	2d 81       	ldd	r18, Y+5	; 0x05
    17a2:	3e 81       	ldd	r19, Y+6	; 0x06
    17a4:	23 30       	cpi	r18, 0x03	; 3
    17a6:	31 05       	cpc	r19, r1
    17a8:	34 f4       	brge	.+12     	; 0x17b6 <M_DIO_Void_SetPinDirection+0x166>
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	91 05       	cpc	r25, r1
    17b2:	61 f0       	breq	.+24     	; 0x17cc <M_DIO_Void_SetPinDirection+0x17c>
    17b4:	5a c0       	rjmp	.+180    	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
    17b6:	2d 81       	ldd	r18, Y+5	; 0x05
    17b8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ba:	23 30       	cpi	r18, 0x03	; 3
    17bc:	31 05       	cpc	r19, r1
    17be:	71 f1       	breq	.+92     	; 0x181c <M_DIO_Void_SetPinDirection+0x1cc>
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	91 05       	cpc	r25, r1
    17c8:	e9 f1       	breq	.+122    	; 0x1844 <M_DIO_Void_SetPinDirection+0x1f4>
    17ca:	4f c0       	rjmp	.+158    	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    17cc:	aa e3       	ldi	r26, 0x3A	; 58
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ea e3       	ldi	r30, 0x3A	; 58
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <M_DIO_Void_SetPinDirection+0x19a>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <M_DIO_Void_SetPinDirection+0x196>
    17ee:	84 2b       	or	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	3b c0       	rjmp	.+118    	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    17f4:	a7 e3       	ldi	r26, 0x37	; 55
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e7 e3       	ldi	r30, 0x37	; 55
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <M_DIO_Void_SetPinDirection+0x1c2>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <M_DIO_Void_SetPinDirection+0x1be>
    1816:	84 2b       	or	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	27 c0       	rjmp	.+78     	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    181c:	a4 e3       	ldi	r26, 0x34	; 52
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e4 e3       	ldi	r30, 0x34	; 52
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <M_DIO_Void_SetPinDirection+0x1ea>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <M_DIO_Void_SetPinDirection+0x1e6>
    183e:	84 2b       	or	r24, r20
    1840:	8c 93       	st	X, r24
    1842:	13 c0       	rjmp	.+38     	; 0x186a <M_DIO_Void_SetPinDirection+0x21a>
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    1844:	a1 e3       	ldi	r26, 0x31	; 49
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e1 e3       	ldi	r30, 0x31	; 49
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <M_DIO_Void_SetPinDirection+0x212>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <M_DIO_Void_SetPinDirection+0x20e>
    1866:	84 2b       	or	r24, r20
    1868:	8c 93       	st	X, r24
			default:                                break;
			}
			break;
			default:    break;
	}
}
    186a:	2a 96       	adiw	r28, 0x0a	; 10
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	2a 97       	sbiw	r28, 0x0a	; 10
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	8b 83       	std	Y+3, r24	; 0x03
    1892:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9a e0       	ldi	r25, 0x0A	; 10
    1898:	69 2f       	mov	r22, r25
    189a:	0e 94 97 10 	call	0x212e	; 0x212e <__udivmodqi4>
    189e:	89 2f       	mov	r24, r25
    18a0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9a e0       	ldi	r25, 0x0A	; 10
    18a6:	69 2f       	mov	r22, r25
    18a8:	0e 94 97 10 	call	0x212e	; 0x212e <__udivmodqi4>
    18ac:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3a 87       	std	Y+10, r19	; 0x0a
    18b6:	29 87       	std	Y+9, r18	; 0x09
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	39 f0       	breq	.+14     	; 0x18ce <M_DIO_Void_SetPinValue+0x52>
    18c0:	29 85       	ldd	r18, Y+9	; 0x09
    18c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    18c4:	21 30       	cpi	r18, 0x01	; 1
    18c6:	31 05       	cpc	r19, r1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <M_DIO_Void_SetPinValue+0x50>
    18ca:	76 c0       	rjmp	.+236    	; 0x19b8 <M_DIO_Void_SetPinValue+0x13c>
    18cc:	e4 c0       	rjmp	.+456    	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	38 87       	std	Y+8, r19	; 0x08
    18d6:	2f 83       	std	Y+7, r18	; 0x07
    18d8:	8f 81       	ldd	r24, Y+7	; 0x07
    18da:	98 85       	ldd	r25, Y+8	; 0x08
    18dc:	82 30       	cpi	r24, 0x02	; 2
    18de:	91 05       	cpc	r25, r1
    18e0:	61 f1       	breq	.+88     	; 0x193a <M_DIO_Void_SetPinValue+0xbe>
    18e2:	2f 81       	ldd	r18, Y+7	; 0x07
    18e4:	38 85       	ldd	r19, Y+8	; 0x08
    18e6:	23 30       	cpi	r18, 0x03	; 3
    18e8:	31 05       	cpc	r19, r1
    18ea:	34 f4       	brge	.+12     	; 0x18f8 <M_DIO_Void_SetPinValue+0x7c>
    18ec:	8f 81       	ldd	r24, Y+7	; 0x07
    18ee:	98 85       	ldd	r25, Y+8	; 0x08
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	69 f0       	breq	.+26     	; 0x1910 <M_DIO_Void_SetPinValue+0x94>
    18f6:	cf c0       	rjmp	.+414    	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
    18f8:	2f 81       	ldd	r18, Y+7	; 0x07
    18fa:	38 85       	ldd	r19, Y+8	; 0x08
    18fc:	23 30       	cpi	r18, 0x03	; 3
    18fe:	31 05       	cpc	r19, r1
    1900:	89 f1       	breq	.+98     	; 0x1964 <M_DIO_Void_SetPinValue+0xe8>
    1902:	8f 81       	ldd	r24, Y+7	; 0x07
    1904:	98 85       	ldd	r25, Y+8	; 0x08
    1906:	84 30       	cpi	r24, 0x04	; 4
    1908:	91 05       	cpc	r25, r1
    190a:	09 f4       	brne	.+2      	; 0x190e <M_DIO_Void_SetPinValue+0x92>
    190c:	40 c0       	rjmp	.+128    	; 0x198e <M_DIO_Void_SetPinValue+0x112>
    190e:	c3 c0       	rjmp	.+390    	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1910:	ab e3       	ldi	r26, 0x3B	; 59
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	eb e3       	ldi	r30, 0x3B	; 59
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <M_DIO_Void_SetPinValue+0xb2>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <M_DIO_Void_SetPinValue+0xae>
    1932:	80 95       	com	r24
    1934:	84 23       	and	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	ae c0       	rjmp	.+348    	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    193a:	a8 e3       	ldi	r26, 0x38	; 56
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e8 e3       	ldi	r30, 0x38	; 56
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <M_DIO_Void_SetPinValue+0xdc>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <M_DIO_Void_SetPinValue+0xd8>
    195c:	80 95       	com	r24
    195e:	84 23       	and	r24, r20
    1960:	8c 93       	st	X, r24
    1962:	99 c0       	rjmp	.+306    	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1964:	a5 e3       	ldi	r26, 0x35	; 53
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e5 e3       	ldi	r30, 0x35	; 53
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 2e       	mov	r0, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <M_DIO_Void_SetPinValue+0x106>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <M_DIO_Void_SetPinValue+0x102>
    1986:	80 95       	com	r24
    1988:	84 23       	and	r24, r20
    198a:	8c 93       	st	X, r24
    198c:	84 c0       	rjmp	.+264    	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    198e:	a2 e3       	ldi	r26, 0x32	; 50
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e2 e3       	ldi	r30, 0x32	; 50
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	48 2f       	mov	r20, r24
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	02 2e       	mov	r0, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <M_DIO_Void_SetPinValue+0x130>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	0a 94       	dec	r0
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <M_DIO_Void_SetPinValue+0x12c>
    19b0:	80 95       	com	r24
    19b2:	84 23       	and	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	6f c0       	rjmp	.+222    	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	3e 83       	std	Y+6, r19	; 0x06
    19c0:	2d 83       	std	Y+5, r18	; 0x05
    19c2:	8d 81       	ldd	r24, Y+5	; 0x05
    19c4:	9e 81       	ldd	r25, Y+6	; 0x06
    19c6:	82 30       	cpi	r24, 0x02	; 2
    19c8:	91 05       	cpc	r25, r1
    19ca:	51 f1       	breq	.+84     	; 0x1a20 <M_DIO_Void_SetPinValue+0x1a4>
    19cc:	2d 81       	ldd	r18, Y+5	; 0x05
    19ce:	3e 81       	ldd	r19, Y+6	; 0x06
    19d0:	23 30       	cpi	r18, 0x03	; 3
    19d2:	31 05       	cpc	r19, r1
    19d4:	34 f4       	brge	.+12     	; 0x19e2 <M_DIO_Void_SetPinValue+0x166>
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	91 05       	cpc	r25, r1
    19de:	61 f0       	breq	.+24     	; 0x19f8 <M_DIO_Void_SetPinValue+0x17c>
    19e0:	5a c0       	rjmp	.+180    	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
    19e2:	2d 81       	ldd	r18, Y+5	; 0x05
    19e4:	3e 81       	ldd	r19, Y+6	; 0x06
    19e6:	23 30       	cpi	r18, 0x03	; 3
    19e8:	31 05       	cpc	r19, r1
    19ea:	71 f1       	breq	.+92     	; 0x1a48 <M_DIO_Void_SetPinValue+0x1cc>
    19ec:	8d 81       	ldd	r24, Y+5	; 0x05
    19ee:	9e 81       	ldd	r25, Y+6	; 0x06
    19f0:	84 30       	cpi	r24, 0x04	; 4
    19f2:	91 05       	cpc	r25, r1
    19f4:	e9 f1       	breq	.+122    	; 0x1a70 <M_DIO_Void_SetPinValue+0x1f4>
    19f6:	4f c0       	rjmp	.+158    	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    19f8:	ab e3       	ldi	r26, 0x3B	; 59
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	eb e3       	ldi	r30, 0x3B	; 59
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <M_DIO_Void_SetPinValue+0x19a>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <M_DIO_Void_SetPinValue+0x196>
    1a1a:	84 2b       	or	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	3b c0       	rjmp	.+118    	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1a20:	a8 e3       	ldi	r26, 0x38	; 56
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e8 e3       	ldi	r30, 0x38	; 56
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <M_DIO_Void_SetPinValue+0x1c2>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <M_DIO_Void_SetPinValue+0x1be>
    1a42:	84 2b       	or	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	27 c0       	rjmp	.+78     	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1a48:	a5 e3       	ldi	r26, 0x35	; 53
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e5 e3       	ldi	r30, 0x35	; 53
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <M_DIO_Void_SetPinValue+0x1ea>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <M_DIO_Void_SetPinValue+0x1e6>
    1a6a:	84 2b       	or	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	13 c0       	rjmp	.+38     	; 0x1a96 <M_DIO_Void_SetPinValue+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1a70:	a2 e3       	ldi	r26, 0x32	; 50
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e2 e3       	ldi	r30, 0x32	; 50
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <M_DIO_Void_SetPinValue+0x212>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <M_DIO_Void_SetPinValue+0x20e>
    1a92:	84 2b       	or	r24, r20
    1a94:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    1a96:	2a 96       	adiw	r28, 0x0a	; 10
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <M_DIO_Void_GetPinValue+0x6>
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <M_DIO_Void_GetPinValue+0x8>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <M_DIO_Void_GetPinValue+0xa>
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9a e0       	ldi	r25, 0x0A	; 10
    1abc:	69 2f       	mov	r22, r25
    1abe:	0e 94 97 10 	call	0x212e	; 0x212e <__udivmodqi4>
    1ac2:	89 2f       	mov	r24, r25
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9a e0       	ldi	r25, 0x0A	; 10
    1aca:	69 2f       	mov	r22, r25
    1acc:	0e 94 97 10 	call	0x212e	; 0x212e <__udivmodqi4>
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    1ad2:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	3e 83       	std	Y+6, r19	; 0x06
    1adc:	2d 83       	std	Y+5, r18	; 0x05
    1ade:	4d 81       	ldd	r20, Y+5	; 0x05
    1ae0:	5e 81       	ldd	r21, Y+6	; 0x06
    1ae2:	42 30       	cpi	r20, 0x02	; 2
    1ae4:	51 05       	cpc	r21, r1
    1ae6:	41 f1       	breq	.+80     	; 0x1b38 <M_DIO_Void_GetPinValue+0x90>
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	83 30       	cpi	r24, 0x03	; 3
    1aee:	91 05       	cpc	r25, r1
    1af0:	34 f4       	brge	.+12     	; 0x1afe <M_DIO_Void_GetPinValue+0x56>
    1af2:	2d 81       	ldd	r18, Y+5	; 0x05
    1af4:	3e 81       	ldd	r19, Y+6	; 0x06
    1af6:	21 30       	cpi	r18, 0x01	; 1
    1af8:	31 05       	cpc	r19, r1
    1afa:	61 f0       	breq	.+24     	; 0x1b14 <M_DIO_Void_GetPinValue+0x6c>
    1afc:	52 c0       	rjmp	.+164    	; 0x1ba2 <M_DIO_Void_GetPinValue+0xfa>
    1afe:	4d 81       	ldd	r20, Y+5	; 0x05
    1b00:	5e 81       	ldd	r21, Y+6	; 0x06
    1b02:	43 30       	cpi	r20, 0x03	; 3
    1b04:	51 05       	cpc	r21, r1
    1b06:	51 f1       	breq	.+84     	; 0x1b5c <M_DIO_Void_GetPinValue+0xb4>
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	84 30       	cpi	r24, 0x04	; 4
    1b0e:	91 05       	cpc	r25, r1
    1b10:	b9 f1       	breq	.+110    	; 0x1b80 <M_DIO_Void_GetPinValue+0xd8>
    1b12:	47 c0       	rjmp	.+142    	; 0x1ba2 <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    1b14:	e9 e3       	ldi	r30, 0x39	; 57
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a9 01       	movw	r20, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <M_DIO_Void_GetPinValue+0x84>
    1b28:	55 95       	asr	r21
    1b2a:	47 95       	ror	r20
    1b2c:	8a 95       	dec	r24
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <M_DIO_Void_GetPinValue+0x80>
    1b30:	ca 01       	movw	r24, r20
    1b32:	81 70       	andi	r24, 0x01	; 1
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	35 c0       	rjmp	.+106    	; 0x1ba2 <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    1b38:	e6 e3       	ldi	r30, 0x36	; 54
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a9 01       	movw	r20, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <M_DIO_Void_GetPinValue+0xa8>
    1b4c:	55 95       	asr	r21
    1b4e:	47 95       	ror	r20
    1b50:	8a 95       	dec	r24
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <M_DIO_Void_GetPinValue+0xa4>
    1b54:	ca 01       	movw	r24, r20
    1b56:	81 70       	andi	r24, 0x01	; 1
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	23 c0       	rjmp	.+70     	; 0x1ba2 <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1b5c:	e3 e3       	ldi	r30, 0x33	; 51
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	88 2f       	mov	r24, r24
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a9 01       	movw	r20, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <M_DIO_Void_GetPinValue+0xcc>
    1b70:	55 95       	asr	r21
    1b72:	47 95       	ror	r20
    1b74:	8a 95       	dec	r24
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <M_DIO_Void_GetPinValue+0xc8>
    1b78:	ca 01       	movw	r24, r20
    1b7a:	81 70       	andi	r24, 0x01	; 1
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	11 c0       	rjmp	.+34     	; 0x1ba2 <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1b80:	e0 e3       	ldi	r30, 0x30	; 48
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a9 01       	movw	r20, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <M_DIO_Void_GetPinValue+0xf0>
    1b94:	55 95       	asr	r21
    1b96:	47 95       	ror	r20
    1b98:	8a 95       	dec	r24
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <M_DIO_Void_GetPinValue+0xec>
    1b9c:	ca 01       	movw	r24, r20
    1b9e:	81 70       	andi	r24, 0x01	; 1
    1ba0:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba4:	26 96       	adiw	r28, 0x06	; 6
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <M_DIO_Void_TogPin+0x6>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <M_DIO_Void_TogPin+0x8>
    1bbe:	0f 92       	push	r0
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9a e0       	ldi	r25, 0x0A	; 10
    1bca:	69 2f       	mov	r22, r25
    1bcc:	0e 94 97 10 	call	0x212e	; 0x212e <__udivmodqi4>
    1bd0:	89 2f       	mov	r24, r25
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9a e0       	ldi	r25, 0x0A	; 10
    1bd8:	69 2f       	mov	r22, r25
    1bda:	0e 94 97 10 	call	0x212e	; 0x212e <__udivmodqi4>
    1bde:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	3d 83       	std	Y+5, r19	; 0x05
    1be8:	2c 83       	std	Y+4, r18	; 0x04
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	9d 81       	ldd	r25, Y+5	; 0x05
    1bee:	82 30       	cpi	r24, 0x02	; 2
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	51 f1       	breq	.+84     	; 0x1c48 <M_DIO_Void_TogPin+0x92>
    1bf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf8:	23 30       	cpi	r18, 0x03	; 3
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	34 f4       	brge	.+12     	; 0x1c0a <M_DIO_Void_TogPin+0x54>
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	9d 81       	ldd	r25, Y+5	; 0x05
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	91 05       	cpc	r25, r1
    1c06:	61 f0       	breq	.+24     	; 0x1c20 <M_DIO_Void_TogPin+0x6a>
    1c08:	5a c0       	rjmp	.+180    	; 0x1cbe <M_DIO_Void_TogPin+0x108>
    1c0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0e:	23 30       	cpi	r18, 0x03	; 3
    1c10:	31 05       	cpc	r19, r1
    1c12:	71 f1       	breq	.+92     	; 0x1c70 <M_DIO_Void_TogPin+0xba>
    1c14:	8c 81       	ldd	r24, Y+4	; 0x04
    1c16:	9d 81       	ldd	r25, Y+5	; 0x05
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	e9 f1       	breq	.+122    	; 0x1c98 <M_DIO_Void_TogPin+0xe2>
    1c1e:	4f c0       	rjmp	.+158    	; 0x1cbe <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    1c20:	ab e3       	ldi	r26, 0x3B	; 59
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	eb e3       	ldi	r30, 0x3B	; 59
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	48 2f       	mov	r20, r24
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 2e       	mov	r0, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <M_DIO_Void_TogPin+0x88>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	0a 94       	dec	r0
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <M_DIO_Void_TogPin+0x84>
    1c42:	84 27       	eor	r24, r20
    1c44:	8c 93       	st	X, r24
    1c46:	3b c0       	rjmp	.+118    	; 0x1cbe <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    1c48:	a8 e3       	ldi	r26, 0x38	; 56
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e8 e3       	ldi	r30, 0x38	; 56
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	48 2f       	mov	r20, r24
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 2e       	mov	r0, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <M_DIO_Void_TogPin+0xb0>
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	0a 94       	dec	r0
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <M_DIO_Void_TogPin+0xac>
    1c6a:	84 27       	eor	r24, r20
    1c6c:	8c 93       	st	X, r24
    1c6e:	27 c0       	rjmp	.+78     	; 0x1cbe <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    1c70:	a5 e3       	ldi	r26, 0x35	; 53
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e5 e3       	ldi	r30, 0x35	; 53
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	48 2f       	mov	r20, r24
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 2e       	mov	r0, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <M_DIO_Void_TogPin+0xd8>
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	0a 94       	dec	r0
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <M_DIO_Void_TogPin+0xd4>
    1c92:	84 27       	eor	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	13 c0       	rjmp	.+38     	; 0x1cbe <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    1c98:	a2 e3       	ldi	r26, 0x32	; 50
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e2 e3       	ldi	r30, 0x32	; 50
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <M_DIO_Void_TogPin+0x100>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <M_DIO_Void_TogPin+0xfc>
    1cba:	84 27       	eor	r24, r20
    1cbc:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	2a 97       	sbiw	r28, 0x0a	; 10
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	8b 83       	std	Y+3, r24	; 0x03
    1ce4:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	9a e0       	ldi	r25, 0x0A	; 10
    1cea:	69 2f       	mov	r22, r25
    1cec:	0e 94 97 10 	call	0x212e	; 0x212e <__udivmodqi4>
    1cf0:	89 2f       	mov	r24, r25
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9a e0       	ldi	r25, 0x0A	; 10
    1cf8:	69 2f       	mov	r22, r25
    1cfa:	0e 94 97 10 	call	0x212e	; 0x212e <__udivmodqi4>
    1cfe:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	3a 87       	std	Y+10, r19	; 0x0a
    1d08:	29 87       	std	Y+9, r18	; 0x09
    1d0a:	89 85       	ldd	r24, Y+9	; 0x09
    1d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	39 f0       	breq	.+14     	; 0x1d20 <M_DIO_Void_SetPinPullUpRes+0x52>
    1d12:	29 85       	ldd	r18, Y+9	; 0x09
    1d14:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d16:	21 30       	cpi	r18, 0x01	; 1
    1d18:	31 05       	cpc	r19, r1
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <M_DIO_Void_SetPinPullUpRes+0x50>
    1d1c:	76 c0       	rjmp	.+236    	; 0x1e0a <M_DIO_Void_SetPinPullUpRes+0x13c>
    1d1e:	e4 c0       	rjmp	.+456    	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	38 87       	std	Y+8, r19	; 0x08
    1d28:	2f 83       	std	Y+7, r18	; 0x07
    1d2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2c:	98 85       	ldd	r25, Y+8	; 0x08
    1d2e:	82 30       	cpi	r24, 0x02	; 2
    1d30:	91 05       	cpc	r25, r1
    1d32:	61 f1       	breq	.+88     	; 0x1d8c <M_DIO_Void_SetPinPullUpRes+0xbe>
    1d34:	2f 81       	ldd	r18, Y+7	; 0x07
    1d36:	38 85       	ldd	r19, Y+8	; 0x08
    1d38:	23 30       	cpi	r18, 0x03	; 3
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	34 f4       	brge	.+12     	; 0x1d4a <M_DIO_Void_SetPinPullUpRes+0x7c>
    1d3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d40:	98 85       	ldd	r25, Y+8	; 0x08
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	91 05       	cpc	r25, r1
    1d46:	69 f0       	breq	.+26     	; 0x1d62 <M_DIO_Void_SetPinPullUpRes+0x94>
    1d48:	cf c0       	rjmp	.+414    	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
    1d4a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d4c:	38 85       	ldd	r19, Y+8	; 0x08
    1d4e:	23 30       	cpi	r18, 0x03	; 3
    1d50:	31 05       	cpc	r19, r1
    1d52:	89 f1       	breq	.+98     	; 0x1db6 <M_DIO_Void_SetPinPullUpRes+0xe8>
    1d54:	8f 81       	ldd	r24, Y+7	; 0x07
    1d56:	98 85       	ldd	r25, Y+8	; 0x08
    1d58:	84 30       	cpi	r24, 0x04	; 4
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <M_DIO_Void_SetPinPullUpRes+0x92>
    1d5e:	40 c0       	rjmp	.+128    	; 0x1de0 <M_DIO_Void_SetPinPullUpRes+0x112>
    1d60:	c3 c0       	rjmp	.+390    	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1d62:	ab e3       	ldi	r26, 0x3B	; 59
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	eb e3       	ldi	r30, 0x3B	; 59
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	48 2f       	mov	r20, r24
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 2e       	mov	r0, r18
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <M_DIO_Void_SetPinPullUpRes+0xb2>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	0a 94       	dec	r0
    1d82:	e2 f7       	brpl	.-8      	; 0x1d7c <M_DIO_Void_SetPinPullUpRes+0xae>
    1d84:	80 95       	com	r24
    1d86:	84 23       	and	r24, r20
    1d88:	8c 93       	st	X, r24
    1d8a:	ae c0       	rjmp	.+348    	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1d8c:	a8 e3       	ldi	r26, 0x38	; 56
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e8 e3       	ldi	r30, 0x38	; 56
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <M_DIO_Void_SetPinPullUpRes+0xdc>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <M_DIO_Void_SetPinPullUpRes+0xd8>
    1dae:	80 95       	com	r24
    1db0:	84 23       	and	r24, r20
    1db2:	8c 93       	st	X, r24
    1db4:	99 c0       	rjmp	.+306    	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1db6:	a5 e3       	ldi	r26, 0x35	; 53
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e5 e3       	ldi	r30, 0x35	; 53
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	48 2f       	mov	r20, r24
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	02 2e       	mov	r0, r18
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <M_DIO_Void_SetPinPullUpRes+0x106>
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	0a 94       	dec	r0
    1dd6:	e2 f7       	brpl	.-8      	; 0x1dd0 <M_DIO_Void_SetPinPullUpRes+0x102>
    1dd8:	80 95       	com	r24
    1dda:	84 23       	and	r24, r20
    1ddc:	8c 93       	st	X, r24
    1dde:	84 c0       	rjmp	.+264    	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1de0:	a2 e3       	ldi	r26, 0x32	; 50
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e2 e3       	ldi	r30, 0x32	; 50
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <M_DIO_Void_SetPinPullUpRes+0x130>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <M_DIO_Void_SetPinPullUpRes+0x12c>
    1e02:	80 95       	com	r24
    1e04:	84 23       	and	r24, r20
    1e06:	8c 93       	st	X, r24
    1e08:	6f c0       	rjmp	.+222    	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
		case ENABLE:
			switch(Local_U8_Group)
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	3e 83       	std	Y+6, r19	; 0x06
    1e12:	2d 83       	std	Y+5, r18	; 0x05
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	82 30       	cpi	r24, 0x02	; 2
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	51 f1       	breq	.+84     	; 0x1e72 <M_DIO_Void_SetPinPullUpRes+0x1a4>
    1e1e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e20:	3e 81       	ldd	r19, Y+6	; 0x06
    1e22:	23 30       	cpi	r18, 0x03	; 3
    1e24:	31 05       	cpc	r19, r1
    1e26:	34 f4       	brge	.+12     	; 0x1e34 <M_DIO_Void_SetPinPullUpRes+0x166>
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	91 05       	cpc	r25, r1
    1e30:	61 f0       	breq	.+24     	; 0x1e4a <M_DIO_Void_SetPinPullUpRes+0x17c>
    1e32:	5a c0       	rjmp	.+180    	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
    1e34:	2d 81       	ldd	r18, Y+5	; 0x05
    1e36:	3e 81       	ldd	r19, Y+6	; 0x06
    1e38:	23 30       	cpi	r18, 0x03	; 3
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	71 f1       	breq	.+92     	; 0x1e9a <M_DIO_Void_SetPinPullUpRes+0x1cc>
    1e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e40:	9e 81       	ldd	r25, Y+6	; 0x06
    1e42:	84 30       	cpi	r24, 0x04	; 4
    1e44:	91 05       	cpc	r25, r1
    1e46:	e9 f1       	breq	.+122    	; 0x1ec2 <M_DIO_Void_SetPinPullUpRes+0x1f4>
    1e48:	4f c0       	rjmp	.+158    	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1e4a:	ab e3       	ldi	r26, 0x3B	; 59
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e3       	ldi	r30, 0x3B	; 59
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	48 2f       	mov	r20, r24
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 2e       	mov	r0, r18
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <M_DIO_Void_SetPinPullUpRes+0x19a>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	0a 94       	dec	r0
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <M_DIO_Void_SetPinPullUpRes+0x196>
    1e6c:	84 2b       	or	r24, r20
    1e6e:	8c 93       	st	X, r24
    1e70:	3b c0       	rjmp	.+118    	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1e72:	a8 e3       	ldi	r26, 0x38	; 56
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e8 e3       	ldi	r30, 0x38	; 56
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	48 2f       	mov	r20, r24
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	02 2e       	mov	r0, r18
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	0a 94       	dec	r0
    1e92:	e2 f7       	brpl	.-8      	; 0x1e8c <M_DIO_Void_SetPinPullUpRes+0x1be>
    1e94:	84 2b       	or	r24, r20
    1e96:	8c 93       	st	X, r24
    1e98:	27 c0       	rjmp	.+78     	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1e9a:	a5 e3       	ldi	r26, 0x35	; 53
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e5 e3       	ldi	r30, 0x35	; 53
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	48 2f       	mov	r20, r24
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	02 2e       	mov	r0, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <M_DIO_Void_SetPinPullUpRes+0x1ea>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	0a 94       	dec	r0
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <M_DIO_Void_SetPinPullUpRes+0x1e6>
    1ebc:	84 2b       	or	r24, r20
    1ebe:	8c 93       	st	X, r24
    1ec0:	13 c0       	rjmp	.+38     	; 0x1ee8 <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1ec2:	a2 e3       	ldi	r26, 0x32	; 50
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e2 e3       	ldi	r30, 0x32	; 50
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	48 2f       	mov	r20, r24
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 2e       	mov	r0, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <M_DIO_Void_SetPinPullUpRes+0x212>
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	0a 94       	dec	r0
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <M_DIO_Void_SetPinPullUpRes+0x20e>
    1ee4:	84 2b       	or	r24, r20
    1ee6:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    1ee8:	2a 96       	adiw	r28, 0x0a	; 10
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <UART_Init>:
 * 	  parity bit type and number of stop bits.
 * 2. Enable the UART RX and TX pins.
 * 3. Setup the UART baud rate.
 */
void UART_Init(void)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <UART_Init+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <UART_Init+0x8>
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
	/*temporary variables to assign the configuration to registers at once*/
	u8  UCSRB_Temp = 0;
    1f06:	1c 82       	std	Y+4, r1	; 0x04
	u8  UCSRC_Temp = 0;
    1f08:	1b 82       	std	Y+3, r1	; 0x03
	u16 UBRR_Value = 0;/*for baud rate equation*/
    1f0a:	1a 82       	std	Y+2, r1	; 0x02
    1f0c:	19 82       	std	Y+1, r1	; 0x01

	/*configure the TX and RX pins as UART pins*/
	SET_BIT(UCSRB_Temp,RXEN);
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	80 61       	ori	r24, 0x10	; 16
    1f12:	8c 83       	std	Y+4, r24	; 0x04
	SET_BIT(UCSRB_Temp,TXEN);
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	88 60       	ori	r24, 0x08	; 8
    1f18:	8c 83       	std	Y+4, r24	; 0x04
	/*set the UBBR according to the Baud-rate selected by user*/
	#if DOUBLE_SPEED == DOUBLE_SPEED_TRUE
		SET_BIT(UCSRA,U2X);
		UBRR_Value= (u16)(((F_CPU) / ((u32)8 *BAUDRATE))-1);/*baud-rate equation from table*/
	#elif DOUBLE_SPEED == DOUBLE_SPEED_FALSE
		UBRR_Value= (u16)(((F_CPU) /((u32)16 *BAUDRATE))-1);/*baud-rate equation from table*/
    1f1a:	83 e3       	ldi	r24, 0x33	; 51
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
	#endif

	UBRRH = (UBRR_Value >>8);
    1f22:	e0 e4       	ldi	r30, 0x40	; 64
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	89 2f       	mov	r24, r25
    1f2c:	99 27       	eor	r25, r25
    1f2e:	80 83       	st	Z, r24
	UBRRL = UBRR_Value;
    1f30:	e9 e2       	ldi	r30, 0x29	; 41
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	80 83       	st	Z, r24
	/*enable the receiver interrupt */
	#if RECEIVE_METHOD == INTERRUPT_MODE
		SET_BIT(UCSRB_Temp,RXCIE);
		CLR_BIT(UCSRB_Temp,TXCIE);
	#else
		CLR_BIT(UCSRB_Temp,RXCIE);
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	8f 77       	andi	r24, 0x7F	; 127
    1f3c:	8c 83       	std	Y+4, r24	; 0x04
		CLR_BIT(UCSRB_Temp,TXCIE);
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	8f 7b       	andi	r24, 0xBF	; 191
    1f42:	8c 83       	std	Y+4, r24	; 0x04
		SET_BIT(UCSRC_Temp,UCSZ0);
		SET_BIT(UCSRC_Temp,UCSZ1);
		SET_BIT(UCSRB_Temp,UCSZ2);

	#elif FRAME_BITS == _8_BITS_DATA_MODE
		SET_BIT(UCSRC_Temp,UCSZ0);
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	82 60       	ori	r24, 0x02	; 2
    1f48:	8b 83       	std	Y+3, r24	; 0x03
		SET_BIT(UCSRC_Temp,UCSZ1);
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	84 60       	ori	r24, 0x04	; 4
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(UCSRB_Temp,UCSZ2);
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	8b 7f       	andi	r24, 0xFB	; 251
    1f54:	8c 83       	std	Y+4, r24	; 0x04
	#endif

	/*configure the number of stop bits as the user chose*/
	#if	STOP_BIT == STOP_BIT_SINGLE
		CLR_BIT(UCSRC_Temp,USBS);
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	87 7f       	andi	r24, 0xF7	; 247
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
		SET_BIT(UCSRC_Temp,USBS);
	#endif

	/*parity check bits off or on and odd or even parity*/
	#if PARITY_CHECK == PARITY_CHECK_OFF
		CLR_BIT(UCSRC_Temp,UPM0);
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	8f 7e       	andi	r24, 0xEF	; 239
    1f60:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(UCSRC_Temp,UPM1);
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	8f 7d       	andi	r24, 0xDF	; 223
    1f66:	8b 83       	std	Y+3, r24	; 0x03
		SET_BIT(UCSRC_Temp,UPM1);
	#endif

	/*assign the required UART configuration in the UART*
	 *Control and Status UCSRB and UCSRC registers		*/
	UCSRB = UCSRB_Temp;
    1f68:	ea e2       	ldi	r30, 0x2A	; 42
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	80 83       	st	Z, r24
	/*select asynchronous mode*/
	CLR_BIT(UCSRC_Temp,UMSEL);
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	8f 7b       	andi	r24, 0xBF	; 191
    1f74:	8b 83       	std	Y+3, r24	; 0x03
	/*select UCSRC register to write configuration to it  */
	SET_BIT(UCSRC,URSEL);
    1f76:	a0 e4       	ldi	r26, 0x40	; 64
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e0 e4       	ldi	r30, 0x40	; 64
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 68       	ori	r24, 0x80	; 128
    1f82:	8c 93       	st	X, r24
	UCSRC |= UCSRC_Temp;
    1f84:	a0 e4       	ldi	r26, 0x40	; 64
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e0 e4       	ldi	r30, 0x40	; 64
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	90 81       	ld	r25, Z
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	89 2b       	or	r24, r25
    1f92:	8c 93       	st	X, r24
	
}
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(u8 Data_byte){
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	0f 92       	push	r0
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (!GET_BIT(UCSRA, UDRE));
    1fae:	eb e2       	ldi	r30, 0x2B	; 43
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	82 95       	swap	r24
    1fb6:	86 95       	lsr	r24
    1fb8:	87 70       	andi	r24, 0x07	; 7
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	81 70       	andi	r24, 0x01	; 1
    1fc0:	90 70       	andi	r25, 0x00	; 0
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	a1 f3       	breq	.-24     	; 0x1fae <UART_sendByte+0xc>
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = Data_byte;
    1fc6:	ec e2       	ldi	r30, 0x2C	; 44
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	80 83       	st	Z, r24
}
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <UART_sendString>:

void UART_sendString(const u8* Str_To_Send){
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <UART_sendString+0x6>
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	9a 83       	std	Y+2, r25	; 0x02
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	0a c0       	rjmp	.+20     	; 0x1ffa <UART_sendString+0x24>
	/*send string char by char until you reach null char*/
	while(*Str_To_Send != '\0')
	{
		UART_sendByte(*Str_To_Send);
    1fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fea:	80 81       	ld	r24, Z
    1fec:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <UART_sendByte>
		Str_To_Send++;
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	01 96       	adiw	r24, 0x01	; 1
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	89 83       	std	Y+1, r24	; 0x01
	UDR = Data_byte;
}

void UART_sendString(const u8* Str_To_Send){
	/*send string char by char until you reach null char*/
	while(*Str_To_Send != '\0')
    1ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffe:	80 81       	ld	r24, Z
    2000:	88 23       	and	r24, r24
    2002:	89 f7       	brne	.-30     	; 0x1fe6 <UART_sendString+0x10>
	{
		UART_sendByte(*Str_To_Send);
		Str_To_Send++;
	}
	/*send the null character to indicate the receiver that the string has ended*/
	UART_sendByte(*Str_To_Send);
    2004:	e9 81       	ldd	r30, Y+1	; 0x01
    2006:	fa 81       	ldd	r31, Y+2	; 0x02
    2008:	80 81       	ld	r24, Z
    200a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <UART_sendByte>
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <UART_receiveString>:

void UART_receiveString(u8* Str_Received){
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	00 d0       	rcall	.+0      	; 0x201e <UART_receiveString+0x6>
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	0a c0       	rjmp	.+20     	; 0x203c <UART_receiveString+0x24>
	while (*Str_Received != '\0')
	{
		*Str_Received = UART_receiveByteSynch();
    2028:	0e 94 2b 10 	call	0x2056	; 0x2056 <UART_receiveByteSynch>
    202c:	e9 81       	ldd	r30, Y+1	; 0x01
    202e:	fa 81       	ldd	r31, Y+2	; 0x02
    2030:	80 83       	st	Z, r24
		Str_Received++;
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	9a 81       	ldd	r25, Y+2	; 0x02
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
	/*send the null character to indicate the receiver that the string has ended*/
	UART_sendByte(*Str_To_Send);
}

void UART_receiveString(u8* Str_Received){
	while (*Str_Received != '\0')
    203c:	e9 81       	ldd	r30, Y+1	; 0x01
    203e:	fa 81       	ldd	r31, Y+2	; 0x02
    2040:	80 81       	ld	r24, Z
    2042:	88 23       	and	r24, r24
    2044:	89 f7       	brne	.-30     	; 0x2028 <UART_receiveString+0x10>
	{
		*Str_Received = UART_receiveByteSynch();
		Str_Received++;
	}
	*Str_Received = '\0';/*assign the null character to the end of the string*/
    2046:	e9 81       	ldd	r30, Y+1	; 0x01
    2048:	fa 81       	ldd	r31, Y+2	; 0x02
    204a:	10 82       	st	Z, r1
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <UART_receiveByteSynch>:


u8 UART_receiveByteSynch(void){
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(!GET_BIT(UCSRA,RXC));
    205e:	eb e2       	ldi	r30, 0x2B	; 43
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	88 23       	and	r24, r24
    2066:	dc f7       	brge	.-10     	; 0x205e <UART_receiveByteSynch+0x8>
		/*
		 * Read the received data from the Rx buffer (UDR)
		 * The RXC flag will be cleared after read the data
		 */
	return UDR;
    2068:	ec e2       	ldi	r30, 0x2C	; 44
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
}
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <UART_receiveByteAsynchCallBack>:

void UART_receiveByteAsynchCallBack(void(*Copy_Ptr)(u8)){
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	00 d0       	rcall	.+0      	; 0x207a <UART_receiveByteAsynchCallBack+0x6>
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
	UART_RXC_CallBack = Copy_Ptr;
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	90 93 69 00 	sts	0x0069, r25
    208a:	80 93 68 00 	sts	0x0068, r24
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <__vector_13>:

ISR(USART_RXC_vect)
{
    2098:	1f 92       	push	r1
    209a:	0f 92       	push	r0
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	0f 92       	push	r0
    20a0:	11 24       	eor	r1, r1
    20a2:	2f 93       	push	r18
    20a4:	3f 93       	push	r19
    20a6:	4f 93       	push	r20
    20a8:	5f 93       	push	r21
    20aa:	6f 93       	push	r22
    20ac:	7f 93       	push	r23
    20ae:	8f 93       	push	r24
    20b0:	9f 93       	push	r25
    20b2:	af 93       	push	r26
    20b4:	bf 93       	push	r27
    20b6:	ef 93       	push	r30
    20b8:	ff 93       	push	r31
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
	if (UART_RXC_CallBack != NULL_PTR)
    20c2:	80 91 68 00 	lds	r24, 0x0068
    20c6:	90 91 69 00 	lds	r25, 0x0069
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	41 f0       	breq	.+16     	; 0x20de <__vector_13+0x46>
		{
			UART_RXC_CallBack(UDR);
    20ce:	e0 91 68 00 	lds	r30, 0x0068
    20d2:	f0 91 69 00 	lds	r31, 0x0069
    20d6:	ac e2       	ldi	r26, 0x2C	; 44
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	8c 91       	ld	r24, X
    20dc:	09 95       	icall
		}

}
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	ff 91       	pop	r31
    20e4:	ef 91       	pop	r30
    20e6:	bf 91       	pop	r27
    20e8:	af 91       	pop	r26
    20ea:	9f 91       	pop	r25
    20ec:	8f 91       	pop	r24
    20ee:	7f 91       	pop	r23
    20f0:	6f 91       	pop	r22
    20f2:	5f 91       	pop	r21
    20f4:	4f 91       	pop	r20
    20f6:	3f 91       	pop	r19
    20f8:	2f 91       	pop	r18
    20fa:	0f 90       	pop	r0
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	0f 90       	pop	r0
    2100:	1f 90       	pop	r1
    2102:	18 95       	reti

00002104 <main>:
//#include "util/delay.h"
//#include "avr/io.h"
//void APP_void_display(u8 received_byte);
#include "DIO/DIO_Interface.h"
int main(void)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	0f 92       	push	r0
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
	//u8 Str[20];
	u8 data;

	M_DIO_Void_SetPinDirection(PD1_PIN , 1);
    210e:	89 e2       	ldi	r24, 0x29	; 41
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	0e 94 28 0b 	call	0x1650	; 0x1650 <M_DIO_Void_SetPinDirection>

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_Init();
    2116:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UART_Init>

	UART_sendByte('A');
    211a:	81 e4       	ldi	r24, 0x41	; 65
    211c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <UART_sendByte>
    while(1)
    {
		data = UART_receiveByteSynch(); /* Receive Byte from Terminal1 */
    2120:	0e 94 2b 10 	call	0x2056	; 0x2056 <UART_receiveByteSynch>
    2124:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(data);       /* Re-send the received byte to Terminal2 */
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <UART_sendByte>
    212c:	f9 cf       	rjmp	.-14     	; 0x2120 <main+0x1c>

0000212e <__udivmodqi4>:
    212e:	99 1b       	sub	r25, r25
    2130:	79 e0       	ldi	r23, 0x09	; 9
    2132:	04 c0       	rjmp	.+8      	; 0x213c <__udivmodqi4_ep>

00002134 <__udivmodqi4_loop>:
    2134:	99 1f       	adc	r25, r25
    2136:	96 17       	cp	r25, r22
    2138:	08 f0       	brcs	.+2      	; 0x213c <__udivmodqi4_ep>
    213a:	96 1b       	sub	r25, r22

0000213c <__udivmodqi4_ep>:
    213c:	88 1f       	adc	r24, r24
    213e:	7a 95       	dec	r23
    2140:	c9 f7       	brne	.-14     	; 0x2134 <__udivmodqi4_loop>
    2142:	80 95       	com	r24
    2144:	08 95       	ret

00002146 <__divmodsi4>:
    2146:	97 fb       	bst	r25, 7
    2148:	09 2e       	mov	r0, r25
    214a:	05 26       	eor	r0, r21
    214c:	0e d0       	rcall	.+28     	; 0x216a <__divmodsi4_neg1>
    214e:	57 fd       	sbrc	r21, 7
    2150:	04 d0       	rcall	.+8      	; 0x215a <__divmodsi4_neg2>
    2152:	14 d0       	rcall	.+40     	; 0x217c <__udivmodsi4>
    2154:	0a d0       	rcall	.+20     	; 0x216a <__divmodsi4_neg1>
    2156:	00 1c       	adc	r0, r0
    2158:	38 f4       	brcc	.+14     	; 0x2168 <__divmodsi4_exit>

0000215a <__divmodsi4_neg2>:
    215a:	50 95       	com	r21
    215c:	40 95       	com	r20
    215e:	30 95       	com	r19
    2160:	21 95       	neg	r18
    2162:	3f 4f       	sbci	r19, 0xFF	; 255
    2164:	4f 4f       	sbci	r20, 0xFF	; 255
    2166:	5f 4f       	sbci	r21, 0xFF	; 255

00002168 <__divmodsi4_exit>:
    2168:	08 95       	ret

0000216a <__divmodsi4_neg1>:
    216a:	f6 f7       	brtc	.-4      	; 0x2168 <__divmodsi4_exit>
    216c:	90 95       	com	r25
    216e:	80 95       	com	r24
    2170:	70 95       	com	r23
    2172:	61 95       	neg	r22
    2174:	7f 4f       	sbci	r23, 0xFF	; 255
    2176:	8f 4f       	sbci	r24, 0xFF	; 255
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	08 95       	ret

0000217c <__udivmodsi4>:
    217c:	a1 e2       	ldi	r26, 0x21	; 33
    217e:	1a 2e       	mov	r1, r26
    2180:	aa 1b       	sub	r26, r26
    2182:	bb 1b       	sub	r27, r27
    2184:	fd 01       	movw	r30, r26
    2186:	0d c0       	rjmp	.+26     	; 0x21a2 <__udivmodsi4_ep>

00002188 <__udivmodsi4_loop>:
    2188:	aa 1f       	adc	r26, r26
    218a:	bb 1f       	adc	r27, r27
    218c:	ee 1f       	adc	r30, r30
    218e:	ff 1f       	adc	r31, r31
    2190:	a2 17       	cp	r26, r18
    2192:	b3 07       	cpc	r27, r19
    2194:	e4 07       	cpc	r30, r20
    2196:	f5 07       	cpc	r31, r21
    2198:	20 f0       	brcs	.+8      	; 0x21a2 <__udivmodsi4_ep>
    219a:	a2 1b       	sub	r26, r18
    219c:	b3 0b       	sbc	r27, r19
    219e:	e4 0b       	sbc	r30, r20
    21a0:	f5 0b       	sbc	r31, r21

000021a2 <__udivmodsi4_ep>:
    21a2:	66 1f       	adc	r22, r22
    21a4:	77 1f       	adc	r23, r23
    21a6:	88 1f       	adc	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	1a 94       	dec	r1
    21ac:	69 f7       	brne	.-38     	; 0x2188 <__udivmodsi4_loop>
    21ae:	60 95       	com	r22
    21b0:	70 95       	com	r23
    21b2:	80 95       	com	r24
    21b4:	90 95       	com	r25
    21b6:	9b 01       	movw	r18, r22
    21b8:	ac 01       	movw	r20, r24
    21ba:	bd 01       	movw	r22, r26
    21bc:	cf 01       	movw	r24, r30
    21be:	08 95       	ret

000021c0 <__prologue_saves__>:
    21c0:	2f 92       	push	r2
    21c2:	3f 92       	push	r3
    21c4:	4f 92       	push	r4
    21c6:	5f 92       	push	r5
    21c8:	6f 92       	push	r6
    21ca:	7f 92       	push	r7
    21cc:	8f 92       	push	r8
    21ce:	9f 92       	push	r9
    21d0:	af 92       	push	r10
    21d2:	bf 92       	push	r11
    21d4:	cf 92       	push	r12
    21d6:	df 92       	push	r13
    21d8:	ef 92       	push	r14
    21da:	ff 92       	push	r15
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	ca 1b       	sub	r28, r26
    21ea:	db 0b       	sbc	r29, r27
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	09 94       	ijmp

000021f8 <__epilogue_restores__>:
    21f8:	2a 88       	ldd	r2, Y+18	; 0x12
    21fa:	39 88       	ldd	r3, Y+17	; 0x11
    21fc:	48 88       	ldd	r4, Y+16	; 0x10
    21fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2200:	6e 84       	ldd	r6, Y+14	; 0x0e
    2202:	7d 84       	ldd	r7, Y+13	; 0x0d
    2204:	8c 84       	ldd	r8, Y+12	; 0x0c
    2206:	9b 84       	ldd	r9, Y+11	; 0x0b
    2208:	aa 84       	ldd	r10, Y+10	; 0x0a
    220a:	b9 84       	ldd	r11, Y+9	; 0x09
    220c:	c8 84       	ldd	r12, Y+8	; 0x08
    220e:	df 80       	ldd	r13, Y+7	; 0x07
    2210:	ee 80       	ldd	r14, Y+6	; 0x06
    2212:	fd 80       	ldd	r15, Y+5	; 0x05
    2214:	0c 81       	ldd	r16, Y+4	; 0x04
    2216:	1b 81       	ldd	r17, Y+3	; 0x03
    2218:	aa 81       	ldd	r26, Y+2	; 0x02
    221a:	b9 81       	ldd	r27, Y+1	; 0x01
    221c:	ce 0f       	add	r28, r30
    221e:	d1 1d       	adc	r29, r1
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	ed 01       	movw	r28, r26
    222c:	08 95       	ret

0000222e <_exit>:
    222e:	f8 94       	cli

00002230 <__stop_program>:
    2230:	ff cf       	rjmp	.-2      	; 0x2230 <__stop_program>
